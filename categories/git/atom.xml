<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | forecho]]></title>
  <link href="http://blog.forecho.com/categories/git/atom.xml" rel="self"/>
  <link href="http://blog.forecho.com/"/>
  <updated>2016-07-08T02:14:06+00:00</updated>
  <id>http://blog.forecho.com/</id>
  <author>
    <name><![CDATA[forecho]]></name>
    <email><![CDATA[caizhenghai@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GitHub 单独设置某个项目的配置信息]]></title>
    <link href="http://blog.forecho.com/github-use-token-push.html"/>
    <updated>2016-02-15T07:08:12+00:00</updated>
    <id>http://blog.forecho.com/github-use-token-push</id>
    <content type="html"><![CDATA[<h2 id="section">场景</h2>

<p>我们先这种情况的谈谈这个使用场景，你不一定用得到这个方法。</p>

<p>A 拿 B 电脑打算使用一段时间，A 用 git clone 了一份自己的代码，想用 B 电脑写一些代码。但是 B 平常也写代码，B 电脑上有一套自己的 git 环境.</p>

<p>那么问题来了，我们要怎样在不修改 B 电脑全局环境的情况下使用 GitHub？</p>

<h2 id="email">单独为项目配置用户名和 Email</h2>

<!--more-->

<p>针对每个项目，单独设置用户名和邮箱，设置方法如下：</p>

<p><code>sh
cd ～/test // git检出目录
git config user.name "your_name"
git config user.email "your_email"
</code>
相应的变量要替换成你自己的信息。</p>

<h2 id="token-">单独设置 token 推送代码</h2>

<p>我记得以前只要是使用 HTTPS 协议的 GitHub 项目，推送的时候会问你账号密码，但是也不知道这次是不是我使用
的这台电脑已经有 ssh 的原因，push 的时候提示我403错误，没有权限，我项目使用的 URL 明明也是 HTTPS。</p>

<p>Google 了半天，最后终于找到解决办法，就是单独生成一个 token，Git remote 的 URL 设置成</p>

<p><code>sh
git remote set-url origin https://&lt;token&gt;@github.com/forecho/blog.git
</code>
其中的 token 你要自己去 GitHub 生成，地址是 <a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a></p>

<p>然后你就可以愉快的 push 代码了，不需要输入账号密码。</p>

<p>参考文章：<a href="https://github.com/blog/1270-easier-builds-and-deployments-using-git-over-https-and-oauth">Easier builds and deployments using Git over HTTPS and OAuth</a></p>

<h2 id="section-1">总结</h2>

<p>出现以上原因只是因为对 Git 以及 GitHub 命令不算很熟悉。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[处理 Git 忘记切分支修改代码的情况]]></title>
    <link href="http://blog.forecho.com/use-git-stash.html"/>
    <updated>2015-12-15T13:56:15+00:00</updated>
    <id>http://blog.forecho.com/use-git-stash</id>
    <content type="html"><![CDATA[<h2 id="section">场景</h2>

<p>有时候没注意分支，直接在 master 上做开发了，但是这是团队开发的大忌。那如果发生了这种情况怎么办，也不用着急，
我教你怎么解决。</p>

<h2 id="section-1">解决问题</h2>

<p>假设你现在在 master 分支上已经修改了文件，那么我们可以使用下面的命令把当前未提交到本地（和服务器）的代码推入到 Git 的栈中：</p>

<p><code>sh
$ git stash
</code>
查看效果：</p>

<p><code>sh
$ git status
</code></p>

<p>切换分支：</p>

<p><code>sh
$ git branch dev
</code></p>

<p>还原代码：</p>

<p><code>sh
$ git stash apply
</code></p>

<p>ok，问题解决。下面我们再补充点知识。</p>

<!--more-->

<h2 id="section-2">总结</h2>

<p>把当前未提交到本地（和服务器）的代码推入到 Git 的栈中：</p>

<p><code>sh
$ git stash
</code></p>

<p>将以前存放的代码应用回来</p>

<p><code>sh
$ git stash apply
</code></p>

<p>或者使用</p>

<p><code>sh
$ git stash pop
</code></p>

<p>区别 pop 会删除栈里面数据 apply 会保留数据</p>

<p>将当前的 Git 栈信息打印出来</p>

<p><code>sh
$ git stash list
</code></p>

<p>将你指定版本号为stash@{1}的工作取出来</p>

<p><code>sh
$ git stash apply stash@{1}
</code></p>

<p>将栈清空</p>

<p><code>sh
$ git stash clear
</code></p>

<h2 id="section-3">补充</h2>

<p>参考：<a href="http://bbs.chinaunix.net/thread-3605709-1-1.html">‘git stash’ 一个强大却容易被忽视的命令</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git 初使用]]></title>
    <link href="http://blog.forecho.com/use-git.html"/>
    <updated>2013-10-11T22:30:00+00:00</updated>
    <id>http://blog.forecho.com/use-git</id>
    <content type="html"><![CDATA[<ul>
  <li>
    <p>Mac 安装 Git，软件下载地址：<a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">https://git-scm.com/book/en/v2/Getting-Started-Installing-Git</a></p>
  </li>
  <li>
    <p>第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：</p>
  </li>
</ul>

<p><code>sh
$ git config --global user.name "forecho"
$ git config --global user.email caizhenghai@gmail.com
</code></p>

<ul>
  <li>建立 SSH key 可以让你在你的电脑和 Git @ OSC 之间建立安全的加密连接。</li>
</ul>

<p><code>sh
$ ssh-keygen -t rsa -C "xxxxx@xxxxx.com"
</code></p>

<ul>
  <li>查看你的 public key，并把他添加到 SSH keys 中 <a href="https://github.com/settings/ssh">https://github.com/settings/ssh</a></li>
</ul>

<p><code>sh
$ cat ~/.ssh/id_rsa.pub
</code></p>

<ul>
  <li>Clone 项目</li>
</ul>

<p><code>sh
$ git clone &lt;https://github.com/iiYii/getyii.git&gt;
</code></p>

<ul>
  <li>复制文件到这个目录下，然后跟踪新的文件：</li>
</ul>

<p><code>sh
$ git add .    # 跟踪所有改动过的文件
$ git add -u    # 只加修改过的文件, 新增的文件不加入.
$ git add -i     # 进入互动模式
</code></p>

<ul>
  <li>提交变更：</li>
</ul>

<p><code>sh
$ git commit -m "xxxx"
$ git commit -a -m 'xxxx'
</code></p>

<blockquote>
  <p><strong>commit和commit -a的区别:</strong>
commit -a相当于：
第一步：自动地add所有改动的代码，使得所有的开发代码都列于index file中
第二步：自动地删除那些在index file中但不在工作树中的文件
第三步：执行commit命令来提交 ​</p>
</blockquote>

<ul>
  <li>推送到服务器上：</li>
</ul>

<p><code>sh
$ git push
</code></p>

<ul>
  <li>恢复单个文件</li>
</ul>

<p><code>sh
$ git checkout -- hello.rb
</code></p>

<p>远程服务器覆盖当前的改动：</p>

<p><code>sh
$ git checkout -f
</code></p>

<ul>
  <li>添加被忽略的文件以及文件夹</li>
</ul>

<p><code>sh
$ git add -f 文件路径
</code></p>

<ul>
  <li>服务器更新本地</li>
</ul>

<p><code>sh
$ git pull
</code></p>

<ul>
  <li>git如何查看某一个文件的详细提交记录</li>
</ul>

<p><code>sh
$ git log -p filename
</code></p>
]]></content>
  </entry>
  
</feed>
