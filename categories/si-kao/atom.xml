<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 思考 | forecho]]></title>
  <link href="http://blog.forecho.com/categories/si-kao/atom.xml" rel="self"/>
  <link href="http://blog.forecho.com/"/>
  <updated>2016-07-08T02:14:06+00:00</updated>
  <id>http://blog.forecho.com/</id>
  <author>
    <name><![CDATA[forecho]]></name>
    <email><![CDATA[caizhenghai@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[项目 Beta 版上线总结]]></title>
    <link href="http://blog.forecho.com/beta-online-summary.html"/>
    <updated>2016-05-22T03:17:22+00:00</updated>
    <id>http://blog.forecho.com/beta-online-summary</id>
    <content type="html"><![CDATA[<h2 id="section">引言</h2>

<p>如果要用一个词来总结我的4月，那么就是两个「加班」。自从去年10月底进入新公司的一个月之后，开始进入全新的项目组进行开发工作。</p>

<p>第一版的任务比较多，一直处于赶进度的状态，去年基本上每天都有在加班。内测版上线的前一个星期我们连续工作了12天（那次周末两天都过来加班），
直到4月25号内测版上线那天晚上我们加班到第二天凌晨1点左右才下班。那天之后持续加班的日子总算熬过头了。</p>

<p>下面我要总结几条经验和教训：</p>

<!--more-->

<h2 id="section-1">需求详细设计文档的必要性</h2>

<p>首先立项的时候项目需求不是非常的明确，第一个月经常改需求，但是项目只给了2个月的时间，是非常的紧急，在这种需求不明确，还没有需求详细文档的情况下，开发进度肯定是非常缓慢的。
但是一旦产品经理给出需求设计详细文档开发起来会非常快的，我们以前公司产品是不写需求详细设计文档的，只有原型，呵呵。</p>

<p>需求详细设计文档看似是花费了产品的大量时间来编写，但是大大方便了开发和测试人员。如果没有需求详细设计文档，开发或者测试只会按照原型结合自己的思维方式来工作，所以需求详细设计文档保证了唯一性。
测试验收产品的时候也非常方便。</p>

<h2 id="section-2">合理的预估开发时间</h2>

<p>有一次产品急着要我们评估时间，然后我就没怎么看功能的细节，结果报了1天时间，最后等我去开发的时候，才发现里面有很多坑，1天是不可能完成的。最后因为我的原因没有按照时间完成今进度。</p>

<p>所以开发人员对于时间的预估这个也是非常重要的。需求过来之后首先你要基本预估一下时间，建议你不要很快的给出一个时间，而是仔细看一下需求，把每个需求拆分成最小颗粒的功能点，然后再去预估你开发每个功能点的时间，
最近把每个功能点相加再乘以2就是你的最终开发时间。</p>

<p>不要因为产品给的时间是明天你也给明天，如果你明天还是完成不了，那只会拖累整个项目的进度。一旦拖延次数多了，整个开发组的人都非常的被动。所以你首先要合理的给出
开发时间上报，如果时间产品那边接受不了，可以再商讨一下是不是可以通过加班赶一下进度或者说是否有必要砍掉不是必须要做的功能。</p>

<h2 id="section-3">标记优先级</h2>

<p>不管是需求还是 Bug 我们都应该标记优先级，标记「必须要完成的」和「可以延期处理的」，然后我们优先完成「必须要完成的」的。</p>

<h2 id="section-4">给测试一点时间</h2>

<p>到目前为止我们有两次上线的经历，但是为什么两次我们都是转钟1点钟才下班的呢？我认为原因有两点：</p>

<ul>
  <li>进入测试阶段我们还在改需求或者写需求。正常情况下这个阶段应该就是只改 Bug 的，如果你改在写需求或者改需求，那么项目肯定是不能按时完成上线的。</li>
  <li>测试时间给的太少。项目上线那天，最迟应该下午把所有 Bug 都改完了，然后就等着晚上上线。上线测试一遍，如果有 Bug，立刻改 Bug。</li>
</ul>

<p>以上就是这次项目的总结，希望以后工作尽量标准化，拒绝小作坊工作方式，拒绝不必要的加班。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如果是我来做项目经理]]></title>
    <link href="http://blog.forecho.com/if-I-was-a-project-manager.html"/>
    <updated>2016-03-01T12:56:22+00:00</updated>
    <id>http://blog.forecho.com/if-I-was-a-project-manager</id>
    <content type="html"><![CDATA[<h2 id="section">我所理解的项目经理</h2>

<p>以前的公司之前是没有项目经理的，只有产品经理，或者说，产品经理和项目经理是同一个人。</p>

<p>去年年底入职的这家公司，新项目的人员分配是这样的：包括项目经理和我在内的4个后端工程师（PHPer）都是新招来的。</p>

<p>从12月初到现在的3月初，不到3个月的时间（中间包括春节）项目现在进度终于接近尾声了，天天加班的日子应该算是熬到头了。</p>

<p>这期间我也算是对项目经理工作职位有了一定的了解，我认为一个项目的核心关键人物就是项目经理。</p>

<p>产品经理只负责整理需求，然后给出需求文档还有原型图。</p>

<p>开发工程师负责写功能模块，项目经理就是来分配任务和把控时间，可能会随身调整项目进度的人。</p>

<p>因为项目时间比较紧急，项目经理也参与了写代码。</p>

<!--more-->

<h2 id="section-1">乔尔测试</h2>

<p>乔尔测试是 Joel Spolsky 在2000年8月提出的一个超简单的软件团队质量测试方法（出自我春节看的《软件随想录 卷一》）：</p>

<p><code>
1. 你们用源码管理系统吗？
2. 你们能一键编译么？
3. 你们做每日编译么？
4. 你们有bug数据库么？
5. 你们在写新代码前修改以前的bug吗？
6. 你们的进度表是最新的么？
7. 你们有软件规格说明书么？
8. 程序员的工作环境安静吗？
9. 你们使用了能买到的最好工具吗？
10. 你们有测试人员吗？
11. 你们面试时会要求应聘人员写代码吗？
12. 你们做过走廊可用性测试吗？
</code></p>

<p>这篇文章距离现在已经快有16年了，但是有几条我认为对现在依然有用。（在这里我不得不佩服作者的思想，中文的世界真是太落后了）</p>

<p>这个测试不一定是100%有效，但是确实能看出一些情况。按照这三个月的项目经验，让我来一一回答这个他的问题：</p>

<p><strong>你们用源码管理系统吗？</strong></p>

<p>我们用的是 git。这个算通过了，但是比较坑爹的是团队里面不是每个人都会 git，但是身为一个项目经理你一定要玩转 git。</p>

<p><strong>你们能一键编译么？</strong></p>

<p>我们是 PHP，没有编译这一说，但是按照现在的这个尿性，我们肯定是不会一键 XX 的。</p>

<p><strong>你们做每日编译么？</strong></p>

<p>也没有这一说，但是我会每天下班之前把最新的代码 push 上去。</p>

<p><strong>你们有bug数据库么？</strong></p>

<p>有，用的是明道，公司一直在用这个，内部搭建的，凑合着用吧。</p>

<p><strong>你们在写新代码前修改以前的 bug 吗？</strong></p>

<p>不修改，我们都是先写功能最后在统一测试。但是现在是一个特殊时期，因为现在项目是从0到1的过程，以后肯定会先修改以前的 bug 在写新代码的。</p>

<p><strong>你们的进度表是最新的么？</strong></p>

<p>这个我认为是最坑爹的了，刚开始项目经理用软件画甘特图规划项目来着，但是真正开始写项目的时候，都没按照那个来，而且他画那个图我只
在我们开会的时候看过一次。所以我们从开始写代码之后就没有什么项目进度表了，也有可能项目经理自己有一份文档在更新吧，反正项目组的其他
成员是不知道项目进度的，也不知道什么功能做了什么功能没做，只知道个大概。</p>

<p>技术总监也老是在群里催进度啊。</p>

<p><strong>你们有软件规格说明书么？</strong></p>

<p>这个还是靠新来的产品总监给力，写了比较详细的需求文档。大部分功能都写了，也算比较详细，应该有80%了。</p>

<p>说实话这算是第一次看到需求文档的详细设计，之前的产品经理能给你画原型就不错了。</p>

<p><strong>程序员的工作环境安静吗？</strong></p>

<p>这个还算可以吧，办公室是大客厅，上班的时候自己待上耳机基本上就可以集中精力了，当然肯定是比不上晚上加班的安静。</p>

<p><strong>你们使用了能买到的最好工具吗？</strong></p>

<p>公司 Mac 都不给配置，双显示器都没有，主机配置倒是还可以，只能说一般，软件就不说了，在中国大家都懂的。</p>

<p><strong>你们有测试人员吗？</strong></p>

<p>这个有，但是都是功能性的测试，压力测试什么的还是考自己吧。</p>

<p><strong>你们面试时会要求应聘人员写代码吗？</strong></p>

<p>这个我们公司倒是没有，其实我也比较怕面试写代码，因为平常考 IDE 写代码依赖性太强了，很多东西记不住。</p>

<p><strong>你们做过走廊可用性测试吗？</strong></p>

<blockquote>
  <p>走廊可用性测试是指，你随便从走廊抓过来一个路人，然后要求他们试用你刚写的程序。如果你这样测试了5个人，你能发现产品在易用性方面95%的问题。</p>
</blockquote>

<p>答案是没有，但是公司老板对交互这块倒是很看重。</p>

<h2 id="section-2">项目遇到的问题</h2>

<ul>
  <li>前期需求讨论、整理和确定花了不少时间，让团队每个人都能快速理解需求不是一个简单的事情。</li>
  <li>项目时间比较紧急，项目组人员都是新人，大家都是工作过几年的程序员了，每个人都有自己的一套编程风格了，但是大家都在赶功能，
前期可能还会帮助那些没有按照规范写代码的同事修改一下代码，后面我也懒得管了，只要功能保证就可以了，所以这次的项目代码风格会有好几套。</li>
  <li>没有进度表。之前我有介绍项目经理使用一些团队协作平台，不知道是不会用还是是没时间用，反正没用起来，我一个人用也没有用。</li>
  <li>前端工程师缺人还搞前后端分离，所以现在项目是一个 restful 项目和一个 PHP 调用 restful 的项目，所以你会发现我们项目进度比较慢也有一部分是这个原因，有时候你会重复写两套代码。
我觉得这样的架构对以后维护来说是一个坑。</li>
  <li>团队中有2个 PHPer （一共是4个 PHPer，后来又加一个 PHPer）不会使用我们选择的 Yii2 框架。项目这么急，是不会给你多少时间学习框架的。</li>
</ul>

<h2 id="section-3">如果我来做项目经理/产品经理</h2>

<ul>
  <li>首先我认为一个项目经理的技术一定要过硬才行，就目前我的技术来说，还是不行，我打算至少做技术到30岁再考虑其他事情吧。</li>
  <li>沟通能力。做技术的一天到晚都对着电脑，都是不太擅长说话，但是做了项目经理/产品经理少不的要与人沟通，所以这个必须要注意加强学习。</li>
  <li>主动性。有时候要经常拉大家开会，讨论项目什么的。</li>
  <li>善用团队协作工具。我认为这个还是有必要的，不要什么工具都不用，感觉想是软件小作坊，大公司都会有专门的部门为公司内部写工具。</li>
  <li>多看书。保持一个持续学习的心态，也要经常去关注行业最新动态，干 IT 这一行新技术穷出不断，有的你玩。</li>
  <li>保持热爱。我们一生要工作很久很久，只有做你最热爱的工作你才不至于那么累，能会开心，有激情，有成就感。</li>
  <li>有好奇心。热爱一些新出来的产品，乐于去尝试新技术、新产品。这个自认为还可以，经常写代码写累了就去看一下 GitHub 和 Product Hunt 的排行榜去看看。</li>
</ul>

<p>以上就写这么多吧，最后送给大家一句乔布斯的名言：「Stay hungry, stay foolish.」</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何阅读一本书]]></title>
    <link href="http://blog.forecho.com/how-to-read-a-book.html"/>
    <updated>2016-01-29T07:36:58+00:00</updated>
    <id>http://blog.forecho.com/how-to-read-a-book</id>
    <content type="html"><![CDATA[<blockquote>
  <p>大致翻译了一下，有些没看懂。😓</p>
</blockquote>

<h2 id="section">买更多的书</h2>

<p>每次买3-10本书，至少让自己有5本待读的书，让自己找不出「没有书可以读」的借口。</p>

<h2 id="section-1">一次读三本书</h2>

<p>同一时间阅读三四本书，可以根据自己的心情和天气，小说和非小说类型随时切换着看。</p>

<p>第一本书卡住了，可以看第二本书。</p>

<!--more-->

<h2 id="section-2">喜欢它，讨厌它，摧毁它。</h2>

<p>你可以完全不用按照页码的方式去阅读。用你想阅读的方式去阅读。这本书是你的，你想怎么用就怎么用。</p>

<p>如果你不喜欢某个页面，扯开。如果你不喜欢一个章，跳过它。如果你想浏览一本书，阅读你感兴趣的章节，想做就做，下一本书。不要感到内疚。</p>

<h2 id="section-3">快速决定</h2>

<p>如果你开始读一本书，你觉得你不喜欢它。把它放在一边一段时间，开始一个新的。一个月后试着用不同的心态再去读一遍。</p>

<p>如果你仍然不能读，当礼物送给朋友，然后忘记它。不要因为你买了它就代表着你必须要看完。大多数人都被一本书卡住了不能做其他事情。</p>

<h2 id="section-4">你自己做决定</h2>

<p>一本书总是像你想的那么好。买家的评论很好，但即使我们都买了同一本书，我们会读一个不同。书是很神奇的，阅读和解释它们根据情况我们完全不同。</p>

<h2 id="section-5">总是带一本书</h2>

<p>每次你在公共汽车/火车/午餐休息看手机，你也可以改变去读3页的书。</p>

<h2 id="section-6">我的技巧「阅读」两次。</h2>

<p>看书对我们两次有神奇的效果。我们第一次读一本书我们经常关注作者的故事和事件。</p>

<p>第二次我们读一本书与更深的情感层面。</p>

<hr />

<p>这七个规则不仅帮助我阅读更多，而且更有效率。</p>

<blockquote>
  <p>来源 <a href="https://medium.com/desk-of-van-schneider/how-to-read-a-book-ee402ff8e754#.wrr4epava">How To Read A Book</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Kindle 阅读]]></title>
    <link href="http://blog.forecho.com/use-the-kindle-reading.html"/>
    <updated>2016-01-09T07:40:34+00:00</updated>
    <id>http://blog.forecho.com/use-the-kindle-reading</id>
    <content type="html"><![CDATA[<h2 id="section">与书结缘的时间线</h2>

<p>也许是小时候受四姨夫的印象，很喜欢看书。前几年回家过年看到他，发现你衣服里面还带着一本宋词鉴赏的书，没想到
他还在看这样的书。</p>

<p>初中那会儿出去跟家人出去逛街，看到书店都两眼放光不想走了。那个时候身上没多少钱，记得有一次和弟弟去逛
图书馆只买了三本书确花了50多块钱，我到现在还记得是哪三本书 - 一本是古希腊神话，另外一本是英语语法的书，最后一本书是英语短语的书。</p>

<p>后来在武汉的时候很喜欢下午5点多的时候去街上摆书的地摊上看看，5块钱就能买3本《格言》和《特别关注》等比较旧一点的杂志，但是我觉得非常值。</p>

<p>再后来高中的时候碰到一个好的语文老师，对于我们这种不太喜欢听语文课的人，她不反对我们上她的课看其他书，当然前提是看好书，她非常反对修仙类的网络小说，
当然包括当时非常火的《诛仙》、《盗墓笔记》等等都归类为不好的书。曾经当着我们的面把一个不听她话的同学的书给撕掉了。对于我这种看书比较慢的人，我当然不喜欢
看那些儿书了，那个时候我看的最多的有蔡智恒、沧月、蔡骏、韩寒的书了，当然我也不否认我看过几本郭敬明和饶雪漫的书，看书的品味都是受当时玩的很好的哥们影响的，非常感谢他们。</p>

<p>上大学之后我看书的时候倒是少了，其实当时报专业的时候我都不知道我们专业具体学什么的，只知道是计算机方面。后来证明我选择的正式我喜欢的，
专业课我基本上都会认证去学。学校有一个标志性建筑 - 图书馆，是我非常向往的地方。一楼和二楼是杂志区，算是比较新的，刚开始去的次数比较多，但是后来
自从有了电脑之后，在高中养成的爱好 - 动漫和电影，慢慢的被放大了，晚上经常在寝室看电影了。但是偶尔回去三楼借一下管理类的书，
每次放寒假都会去五楼接专业书带回家过年看，也会去看一下杂志。关于看书整个大学有几件事印象比较深的书：</p>

<ul>
  <li>在杂志看了一本互联网周刊的杂志，里面有介绍作为一个慢公司的豆瓣，觉得这个公司很有意思，给我留下较深过的印象。</li>
  <li>看了一本关于 Google 的书，好像叫《搜主义》，才开始了解 Google。</li>
  <li>看了一本分享全球企业家演讲文章的书，那个时候开始喜欢看一些管理类的书。</li>
  <li>第一年寒假的时候借了一本 C 语言的书，回去看，才真正知道 C 语言是怎么回事。之前上课课程安排的都不好，老师在上面讲的很投入，但是我在下面打瞌睡。</li>
</ul>

<!--more-->

<h2 id="kindle">Kindle</h2>

<p>上班半年多之后，知道有 Kindle 这个东西，但是对这个东西还没什么概念，因为高中有买 MP4 然后拿数据线去网吧下载 TXT 的经历。
直到有一次参加一个武汉知乎聚会，发现一个同学带了一个电纸书，但是不是 Kindle 是 Nook，体验了一番瞬间被那个水墨屏给震撼到了。
回来之后立马搜索了一下，决定买一个 Kindle，但是那个时候 Kindle 还没有国产的，去淘宝搜索一个，最新版是 Kindle5，价格600，没犹豫立马就买了。</p>

<p>自从那之后 Kindle 上下班一直陪伴着我，用 Kindle 看的书虽然不是非常多，但是我仍然认为 Kindle 是我买的最
值得的一个电子设备，而且还不伤眼睛。现在的我们很少会有耐心在电脑上看完一篇比较长的文章，但是我可以配合 <a href="https://www.readability.com">readability</a> 的 Send to Kindle 真是利器，
让我阅读了很多长篇文章，受益良多。</p>

<p>有很多人不太理解为什么有了 iPhone 和 iPad 之后为什么还需要 Kindle？我认为有两点：</p>

<ul>
  <li>Kindle 不伤眼镜，因为是水墨屏。</li>
  <li>Kindle 更专一，专注于阅读。有时候我们用手机去阅读，不到2分钟就想去刷微信刷微博，或者来一个推送消息，对阅读的干扰非常大。这就是为什么我都大半年不看微信订阅号了，阅读体验非常差。</li>
</ul>

<h2 id="kindle5-vs-kindle-paperwhite-3">Kindle5 VS Kindle Paperwhite 3</h2>

<p>前几天看到京东国际上有做活动，只要666就能把 Kindle Paperwhite 3 带回家，但是是海外版，不能退不保修，考虑一下，最后还是心动了。
下面放两张对比图片：</p>

<p>左边是 KPW3，右边是 Kindle5：</p>

<p><img src="http://i4.tietuku.com/9eedcc5d900678dd.png" alt="" /></p>

<p>KPW3 后背 LOGO 变成 amazon 了：</p>

<p><img src="http://i4.tietuku.com/c1f9765d63abda74.png" alt="" /></p>

<p>海淘最痛苦的是，买了东西要经过漫长的等待！我差不多等了20天，算是一种折磨。用了一段 KPW3 之后我来谈谈两个的区别：</p>

<ul>
  <li>受到摩尔定律之福，想不到2015年年底我买 KPW3 比我在2012年年底买的 Kindle5 只贵了一点点。</li>
  <li>Kindle5 没触屏，全是实体按键，两侧边翻页体验非常好，但是打字的体验非常差，还好我只有在输入 WIFI 密码的时候需要打字。KPW3 触屏，只有一个开机键实体按键，触屏翻页的时候偶尔会有误操作。但是因此 KPW3 重量也增加了。</li>
  <li>明显 KPW3 硬件更强大了，操作的时候反应速度也快了点。容量也变成 4G，Kindle5 是 1G。</li>
  <li>KPW3 有屏幕背光，Kindle5 没有，灯光暗的时候需要借助外界灯光才能阅读。</li>
</ul>

<p>大概就是以上吧，Kindle5 唯一不能然我割舍的是两侧边翻页按键和轻薄。Kindle Voyage 好像解决了我的第一个问题，我有体验过，但是重量没对比过。</p>

<h2 id="section-1">小插曲</h2>

<p>国际亚马逊账号和国内亚马逊账号是各自独立的，使用 KPW3 登录账号的时候，一直登录是美国账号，但是系统明明是中文的，后来我才发现，我两个账号账号密码设置成一样的了。解决办法就是修改其中一个账号密码。</p>

<h2 id="section-2">总结</h2>

<p>总结以上就是，如果你是一个喜欢阅读的人，非常推荐你入手一款 Kindle，他讲带给你的受益远远超过它的价格，不用犹豫了。
至于是否考虑其他电纸书？我的回答是：不要考虑，直接买 Kindle，因为只有它成功的解决了电子阅读需求。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[塑造成功框架的哲学]]></title>
    <link href="http://blog.forecho.com/successful-framework-philosophies.html"/>
    <updated>2015-12-27T14:37:01+00:00</updated>
    <id>http://blog.forecho.com/successful-framework-philosophies</id>
    <content type="html"><![CDATA[<blockquote>
  <p>来源：<a href="http://www.capitalone.io/blog/successful-framework-philosophies/">Philosophies that Shaped Successful Frameworks</a></p>
</blockquote>

<p>在过去的十年里我们看到了许多软件框架的出现，像 <a href="http://spring.io/">Spring</a> 和 <a href="http://rubyonrails.org/">Ruby on Rails</a> 已经是非常成功的框架了，掌握它们就意味着打开多扇就业机会的大门了。然而，对于每一个框架的成功，背后的大多数开发人员都不被人关注。2008年1月1日<a href="https://en.wikipedia.org/wiki/Software_framework">维基百科</a> 列出了67个 Web 框架。然而今天，超过三分之二的消失在列表中或在三年内没有更新。作为 Yii 框架的创造者，我花了很多时间调查各种框架和理解为什么有些成功，有些失败了。我将描述我发现塑造成功框架的一些哲学。</p>

<h2 id="section">为什么框架?</h2>

<p>建立一个成功的框架，重要的是要了解什么是框架，开发人员为什么需要它们。</p>

<p><a href="https://queue.acm.org/detail.cfm?id=1017005">Douglas C. Schmidt 等人</a> 认为框架作为一个集成的软件构件(如类、对象和组件)集合，为相关应用程序提供一个可重用的体系结构。根据这一定义，
框架应该是一个已完工的应用骨架组成可重用和可定制的组件。开发人员将扩展并定制一个框架通过提供他们的应用程序和领域特定逻辑来形成一个完整的应用程序。</p>

<p>一个框架典型的特征就是所谓的控制反转（<a href="http://martinfowler.com/bliki/InversionOfControl.html">inversion of control</a>）。框架通常扮演着组织主程序的角色和调用应用程序代码。这里是反过来的控制流——它调用我而不是我调用框架。下图说明了框架之间的关系，函数库，和应用程序。注意框架通常提供现成的功能的库，以帮助开发人员构建应用程序更快。</p>

<p><img src="https://segmentfault.com/img/bVtewA" alt="" /></p>

<p>开发人员使用框架最重要的原因是框架如何提高生产力和帮助提高代码质量。例如，现代的框架(例如，django)，经常提供代码生成工具或样板帮助立即启动新项目。此外，精心设计的框架内嵌安全保护措施，帮助预防开发人员犯典型的安全漏洞。</p>

<p>企业使用框架，还有一个额外的好处是，它可以应用在整个企业，帮助执行标准。框架提供了记录模式，详细的设计和实现的工具用于在所有应用程序之间提供一个一致的结构。例如，在 Capital One (译者注：薛强所在的公司) 我们开发一个 「Chassis」的框架作为一个集成的基础，统一了许多厂商和顾客公司内部开发应用程序的 API。</p>

<p>当然，并不是所有的开发人员喜欢使用框架。一些一致的抱怨包括陡峭的学习曲线，框架耦合性比较高，性能较低，等等。今天，在这篇文章中我将为你解释现代框架如何的解决这些问题，让大多数的这些抱怨不再适用。</p>

<!--more-->

<h2 id="section-1">哲学</h2>

<p>像任何一个产品一样，一个框架的成功取决于许多因素，包括其背后的思想，代码质量、文档，周围社区，营销，支持，等等。在我看来，特别重要的一项是考虑当一个框架被设计和开发的哲学。</p>

<p>好久以前 Python 开发者 Tim Peters 开发 Python 时发表了被称为 <a href="https://www.python.org/dev/peps/pep-0020/">Python 之禅</a> 的二十格言设计原则。『优美胜于丑陋，明了胜于晦涩，简洁胜于复杂……』他们鼓舞了许多<a href="https://redd.it/15itwl">类似的编程语言之禅（similar programming language zens）</a>，我发现这些格言是适用于框架设计的。根据我的框架开发经验，我特此冷凝和总结我认为任何成功的框架最重要的哲学。</p>

<ul>
  <li>越简单越好</li>
  <li>整体设计是最糟糕的</li>
  <li>一致性</li>
  <li>明了胜于晦涩</li>
  <li>约定大于配置</li>
</ul>

<h2 id="section-2">越简单越好</h2>

<p>让开发人员转换一个新的框架从来都不是一件容易的事。然而，当开发人员选用框架，会作为重点依靠它来投资当前和未来的项目。此外，不想使用类库 - 开发人员可以学习一个 API 实现它 - 学习框架要求开发人员在投入实际使用之前要充分理解框架规则。因此，重要的是要确保简单的设计一个框架，使它更容易、有趣，而且容易去学习，接受和利用。</p>

<p>为了实现简单，一个框架应该强制执行一定数量的限制规则；同时，这些规则应以统一的方式设计和有良好的文档记录。框架执行更多的规则，陡峭的学习曲线，让开发人员很难接受。当规则是一致的，开发人员可以更快学习它们。没有文档，一个框架是无用的。因为没有人会花时间反向工程其规则。</p>

<p><a href="http://alirizhi.com/">Express.js framework</a> 框架路由语法规则的设计是一个很好的例子，一个非常受欢迎的 web 应用服务器框架。而路由在 web 应用程序中是一个重要的概念，是确定应用程序如何响应客户端请求一个特定的端点（一个HTTP方法和一个URI）。Express.js 介绍一个简单的规则来定义一个路线，<code>app.METHOD(PATH, HANDLER)</code>，<code>METHOD</code> 是一个 HTTP 请求方法(例如 GET、POST)，<code>PATH</code> 是服务器上的一个 URI 路径，<code>HANDLER</code> 是回调函数路线相匹配时要执行的。下面的代码片段显示了 Express.js 路由代码的样子。</p>

<p>&#8220;`javascript
var express = require(‘express’);
var app = express();</p>

<p>// accept homepage request 
app.get(‘/’, function (req, res) {
  res.send(‘Hello World!’);
});</p>

<p>// accept POST request at /user 
app.post(‘/user’, function (req, res) {
  res.send(‘Got a PUT request at /user’);
});</p>

<p>// accept DELETE request at /user 
app.delete(‘/user’, function (req, res) {
  res.send(‘Got a DELETE request at /user’);
});
&#8220;`
上面的代码是不言自明的，因为它像是如何去看一个 HTTP 请求。因此,开发人员只需要很少的努力去学习就记住这个路由语法并且把它的实用性应用到自己的项目中。</p>

<h2 id="section-3">整体设计是最糟糕的</h2>

<p>这里的术语「整体」指的是以一个以紧密耦合的代码库为基础构建的框架。web 框架刚开始流行时，他们往往是一个整体，因为他们的主要目标是提供全方位的快速的 web 应用程序开发。渐渐地，人们意识到整体框架有很多问题。例如，
即使改变是框架完全无关的一小部分需要重新测试和释放整个，从而导致应用程序的框架要重建。实际上，整体框架的中代码耦合使得它非常难以保持不同版本的向后兼容性。比如专业缓存、日志、数据库，人们变得不那么愿意被绑定到一个单一的整体框架。</p>

<p>现代框架往往是松散耦合的体系结构。全栈框架（例如 Spring ）已经演变成由松散耦合的组件可以单独使用或与第三方交换的框架。专门的框架是有明确的契约，以支持更好的互操作性，这使得应用程序不依赖于特定的框架。例如，一个非常受欢迎的 web 路由框架的特点是所谓『Sinatra-type 框架』，如 <a href="http://www.sinatrarb.com/">Sinatra</a>，<a href="http://expressjs.com/">Express.js</a> 和 <a href="http://martini.codegangsta.io/">Martini</a>。这些框架使用以下中间件管道架构支持请求路由和处理web应用程序。框架本身是非常小的,但开放式体系结构允许他们无限丰富的各种中间件组件。</p>

<p><img src="https://segmentfault.com/img/bVtewC" alt="" /></p>

<h2 id="section-4">一致性</h2>

<p>一致性意味着一个框架，坚持使用统一的设计，命名约定，代码风格，代码组织等等。一个一致性的框架将降低门槛，因为用户可以学习框架一个方面，并且应用相同的模式，去快速学习其他的结构。一致还可以帮助用户减少框架特征错别字或误用的可能性。</p>

<p>例如，当设计 Yii 框架的 query builder ，我们把一致性作为一个指导标准。查询构建器（query builder）允许您以编程方式创建一个数据库无关的 SQL 语句，避免 SQL 注入攻击。为了帮助用户更容易地记住它的 API ,我们介绍了链式接口和命名后相应的 SQL 关键字的方法。下面的代码片段显示了如何使用 SQL 语句查询构建器设计。</p>

<p><code>php
(new Query())
    -&gt;select('id, email')
    -&gt;from('user')
    -&gt;orderBy('last_name, first_name')
    -&gt;limit(10)
    -&gt;all();
</code>
上面的代码将生成和执行 MySQL 声明如下:</p>

<p><code>sql
SELECT `id`, `email`FROM `user`ORDER BY `last_name`, `first_name`LIMIT 10
</code></p>

<p>正如您可以看到的，代码读取非常类似于你编写 SQL 语句。查询构建器之间的一致性和 SQL 语法很容易学习查询生成器。</p>

<h2 id="section-5">显示大于隐式</h2>

<p>关于编写自己的代码显式大于隐式，避免过多的使用 “自动魔法”，有两个原因坚持这种哲学。首先，显示的代码更容易理解和维护。由于代码是自解释的，维护人员可能不是代码的原作者，不需要来回跳转找到实际上执行的代码。其次，显示的代码不容易出错。虽然显示的可能需要编写更多的代码行，它减少了看似简单含蓄确笼罩着重要的代码的情况。</p>

<p>看看下面的两个 ORM (对象关系映射) 在 PHP 的代码。他们都希望实现『订单』数据库记录和『客户』DB 记录之间建立外键引用约束的相同的目标。</p>

<p><code>
$order-&gt;link('customer', $customer);
</code>
与</p>

<p><code>
$order-&gt;customer = $customer;
</code></p>

<p>第一个版本是正常的方法调用。第二个版本看起来更酷，因为复杂的数据库连接操作可以通过一个看似简单的任务来完成。然而，这是一种错觉，第二个版本的简单性是由其他地方的的复杂性隐藏掩盖。例如，用户不得不通过某种形式的文档来学习这种特殊的赋值语法，以便在实践中使用它。因为链接操作看起来像一个正常分配时，用户可能会忘记处理由它引起的潜在的异常，从而导致整个程序发生故障。</p>

<p>事实上，Yii 的发展过程中，关于两个版本我们讨论了很多，并最终选定了第一个版本，它已收到投诉很少。</p>

<h2 id="section-6">约定大于配置</h2>

<p>约定大于配置的概念已经存在好多年了。这个想法是一个框架应该采取坚持的公约，遵守约定同时仍然允许通过配置提高扩展性。决策的目标是减少开发人员需要做的数目，从而实现哲学# 1——简单性。</p>

<p>约定大于配置最早在 Ruby on Rails 框架中开始流行。Rails 提供一个 ActiveRecord 库，用类和数据库中的表之间的映射处理。按照惯例，表名是类名的多元化形式。因此，该类账户将有一个表称为帐户。如果该表不命名这种方式，用户将必须显式配置类名和表名称之间的映射关系。</p>

<p>许多 MVC 框架使用约定大于配置请求路由到特定的代码片断。如下图所示,<a href="http://sailsjs.org/">Sails.js framework</a> 框架使用的约定，其中的 <code>/we/say/hi</code> URL请求将被路由到<code>controllers/we</code>目录下 SayController 控制器类的<code>hi</code> 动作。按照本约定，开发人员不再需要对控制器的行为定义路由规则。但是，如果开发人员想要使用一个不同的路由规则，他们仍然可以通过显式绑定一个路由到一个控制器动作。</p>

<p><img src="https://segmentfault.com/img/bVtewD" alt="" /></p>

<p>约定优于配置有助于减少需要编写的代码量。然而，它会给开发人员需要遵守规则引入了额外的成本。同时，也往往与前面讨论的『显示大于隐式』的哲学相冲突。事实上，虽然早期版本的 Spring 框架使用了似的 Sails.js 路由约定，Spring 现在要求开发者通过注释明确指定映射。因此，当决定是否引入新的规则以支持约定大于配置，应采取明智的判断。</p>

<h2 id="section-7">总结</h2>

<p>建设一个成功的框架是所有关于功能和简洁性之间的平衡。整个构建框架的过程中，取舍经常需要以坚守，并举例说明，上述哲学加以考虑。</p>

<p>有时候，你可能会遇到其中一个理念是与另一个直接冲突的情况。一致性是比简单更重要？在约定比显性更重要？在这种情况下，<strong>请记住，一个框架的最终目标是简化开发人员的工作，并简化代码的编写进程。因此，保持它的简单和直接。</strong>如果他们有明确性冲突，因为前者会带来隐藏的复杂性可以牺牲约定。同样，如果坚持一致性可以稍微违反严格会造成额外的并发症。</p>

<p>Posted Dec 15, 2015 by…</p>

<p><img src="https://segmentfault.com/img/bVtewE" alt="" />
<strong>Qiang Xue</strong></p>

<p>软件工程师LEAD、技术人员</p>

]]></content>
  </entry>
  
</feed>
