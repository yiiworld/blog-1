<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[forecho]]></title>
  <link href="http://blog.forecho.com/atom.xml" rel="self"/>
  <link href="http://blog.forecho.com/"/>
  <updated>2016-07-08T02:14:06+00:00</updated>
  <id>http://blog.forecho.com/</id>
  <author>
    <name><![CDATA[forecho]]></name>
    <email><![CDATA[caizhenghai@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[谈谈考驾照的事情]]></title>
    <link href="http://blog.forecho.com/talk-about-things-driving-test.html"/>
    <updated>2016-06-28T15:19:22+00:00</updated>
    <id>http://blog.forecho.com/talk-about-things-driving-test</id>
    <content type="html"><![CDATA[<h2 id="section">引言</h2>

<p>2016年过完年之后就有打算考驾照的事情，想考驾照主要有两个原因：</p>

<ol>
  <li>拿驾照最好的时间是在大学，但是我错过了。发现越晚拿驾照所花的时间和精力就越多，所以这件事情能不拖就不要拖。</li>
  <li>深圳今年考驾照费用开始降价，考场也增加了，而且现在有几家公司在尝试「互联网」方式学车。</li>
</ol>

<!--more-->

<h2 id="section-1">挑选驾校</h2>

<p>年后过来我应该立刻报名驾校的，但是苦于项目还在赶进度上线，天天加班，这种状态一直持续到4月份左右。</p>

<p>后来有时间之后终于可以考虑学车的事情了，第一件事就是开始选驾校。</p>

<p>那个时候「互联网」学车都要好多家，根本不知道选什么。</p>

<p>传统驾校也看了几家，网上一搜索评价，也没敢选哪一家。我一边选驾校，一边准备报名的资料，就在我纠结的这段时间里，深圳取消了
自助约考的模式，坑爹的是我4月1号那天凌晨还准备我的第一次预约的。而且各个互联网学车平台也相应的修改套餐价格了。这让我又陷入了选择中。</p>

<p>最后发现一直拖延下去也不是个事，所以要先报名再说。经过筛选排除了「淘师傅」、「起驾」、「好好学车」，最后拉上好基友一起报名了「萌萌学车」。
花了4600多块钱吧，价格比传统互联网学车便宜，在互联网学车中，价格适中。</p>

<p><img src="http://ww4.sinaimg.cn/large/4cc5f9b3gw1f5bdeswontj20gc04st8y.jpg" alt="" /></p>

<p><strong>PS: 报名准备资料</strong></p>

<ul>
  <li>居住证（没有居住证有居住登记也可以）</li>
  <li>数码回执照片</li>
  <li>学车体检报告（很多医院都可以体检，建议不要去非常大的医院去体检，体检项目非常简单，5分钟搞定，主要检查你眼睛是否是色盲。我去的是南山人民医院，去了之后才发现那个医院还要提前预约，结果跑了第二趟，也浪费了一个星期时间）</li>
</ul>

<h2 id="section-2">录指纹和学习科目一理论课</h2>

<p>我是5月7号报名，5月9好资料交齐。然后他们帮我预约考试。5月25号收到流水号，这个时候你才选报名成功。</p>

<p>然后一周内（5月28号）安排你去录指纹和学习科目一理论课。这个必须要亲自去，而且还要花费一整天的时间。做好心理准备。</p>

<p>对比我同事驾校，先说说优缺点：</p>

<p>优点：</p>

<ul>
  <li>萌萌学车安排在周末去，不用请假。我同事报名的那个驾校结果是工作日去，还要请假去，比较坑（请假一天成本太高）。</li>
  <li>地点在西丽，不算太远。我同事那个安排在龙岗，非常远。</li>
</ul>

<p>缺点：</p>

<ul>
  <li>没安排转车接送，也没有工作人员接待。那天好多事情都比较蒙逼，大多数只能考我们自己。</li>
</ul>

<h2 id="section-3">预约科目一</h2>

<p>6月15号正式收到科目一考试的短信通知，让我6月25号去考科目一。庆幸那天是周六，又不用请假。</p>

<p>然后后来把考试这个事情忘记了，都忘记看题了，直到考试前三天被女友提醒，开始看题。</p>

<p>一共又1300多道题，没看完，结果就去考试了，然后两次机会都考了89分，倒数第二题做错了，两次都是。</p>

<p>主要要汽车内部和汽车内部的一些指示灯都不了解，坑爹。然后就只能准备补考了。</p>

<p><strong>补考的流程</strong></p>

<p>拿到缴费编号-&gt;支付补考费用-&gt;重新预约补考</p>

<p>找萌萌学车要缴费编号两天还没给我，然后我无意中登录驾考系统发现里面有相关信息（关指望客服也不是办法，还要靠自己）。然后去「深圳交警」微信公众号上缴费成功。
缴费流程是：微信关注「深圳交警」公众号-&gt;点击「星级用户」-&gt;「车管规费缴纳」</p>

<p><strong>PS：小贴士</strong></p>

<ul>
  <li>考试地点：旧车管所（手机地图搜索「科目一考试地点」）。可以坐地铁到白石洲 B 出口，坐43，56路公交车在「军休二所」公交站下车，然后拐个弯，爬一个小山就到了（科目一考试地点在山顶）</li>
  <li>时间：一定要提前过去排队，考试要排队取号，然后叫号考试。</li>
</ul>

<h2 id="section-4">关于换预约手机号码</h2>

<p>6月12号，收到几条车管所发来的短信，大概就是说要启用新的「省局互联网平台」网站进行各科考试预约系统。</p>

<p>这又是一个坑爹的系统，而我恰好就被坑了，请看下图：</p>

<p><img src="http://ww2.sinaimg.cn/large/4cc5f9b3gw1f5beu95k6vj20lg03owf6.jpg" alt="" /></p>

<p>现在手机号码的重要性越来越大，所以我来深圳之后怕麻烦就一直没换号，还是在用武汉的联通，结果就被坑了，注册的时候
收不到手机验证码，如果注册的时候直接写其他号码，就提示我「与初次预约的手机号码不符」。当时看到这个信息我的心里表情是这样的：</p>

<p><img src="http://ww3.sinaimg.cn/large/4cc5f9b3gw1f5bf05b5uej20gy0d640m.jpg" alt="" /></p>

<p>以及这样的：</p>

<p><img src="http://ww2.sinaimg.cn/large/4cc5f9b3gw1f5bfobp5vzj20c1080aaq.jpg" alt="" /></p>

<p>这TM我根本没发玩啊。最后没办法，网上不提供修改手机号码的入口，只能去「新车管所」办理修改业务。而且「新车管所」只有
9：00-17：00 星期一到星期五上班，我只想说比我下班都早！</p>

<p>7月1号就开始用新系统了，没办法今天早上去车管所把这个事给办了。</p>

<p>到了车管所，先去「综合业务」区咨询业务。然后他们给了我一张表和一个二维码小纸条，还让我去复印身份证。
结果排了对花了1块钱复印了身份证根本没用上，那张表也没用上。二维码用上了，有那个才能进办业务的入口。</p>

<p>主要是因为我连驾照都没有，如果是有驾照之后要变更信息的估计要填表和身份证复印件。</p>

<p>没有驾照而变更手机号码，只需先去「综合业务」要一个二维码，再进入12号服务台填写一个表就 OK 了。然后第二天才生效。</p>

<p>最后吐槽一下：车管所办业务服务很差，公务员一脸很不爽的表情。</p>

<p><strong>PS：小贴士</strong></p>

<ul>
  <li>新车管所地点：就在旧车管所附近。可以坐地铁到白石洲 B 出口，坐43，56路公交车在「新车管所」公交站下车。</li>
  <li>去办业务需要注意他们的上班时间。</li>
  <li>有些业务能再网上预约的就最好提前预约，不懂的可以直接关注「深圳车管所」订阅号直接资讯，会有客服回复。</li>
</ul>

<h2 id="section-5">待续。。。</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谈谈时间管理]]></title>
    <link href="http://blog.forecho.com/talk-about-time-management.html"/>
    <updated>2016-06-12T15:17:22+00:00</updated>
    <id>http://blog.forecho.com/talk-about-time-management</id>
    <content type="html"><![CDATA[<h2 id="section">引言</h2>

<p>年少的我们总是对时间毫无概念，那个时候我们对时间无所谓的挥霍。</p>

<p>真正让我对时间有概念的是因为看了《把时间当做朋友》和《暗时间》这两本书。</p>

<p>《把时间当做朋友》这本书有提到《奇特的一生》这本书，讲的就是柳比歇夫的时间管理之道，他把每天的时间都记录下来，而且经常回顾与总结，坚持了56年的”时间统计法”给了我深刻的影响。然后就没有然后了。</p>

<p>直到后来我读到 <a href="http://lucida.me/">Lucida</a> 的<a href="http://lucida.me/blog/2016-week-4-reading-notes/">《2016 年第 4 周阅读记录》</a> 和 <a href="http://lucida.me/blog/2016-feb-summary/">《2016 年 2 月小结》</a> 又让我想起时间管理这个词来。</p>

<p>看到 Lucida 的实践，我也手痒了，想实践一下。</p>

<!--more-->

<h2 id="section-1">实践</h2>

<p><strong>使用 aTimeLogger2 App 来记录时间</strong></p>

<p>aTimeLogger2 算是比较时间好用的时间记录软件，但是有一点比较麻烦，就是你必须手动点击开始然后记得手动再去点结束。</p>

<p><img src="http://ww2.sinaimg.cn/large/4cc5f9b3gw1f4stre4c4dj20hs0vkjvc.jpg" alt="" /></p>

<p>坚持记录了差不多有半个月之后我发现我健身和阅读的时间相对来说是少之又少。
随便打个游戏或者看个时间都要1个小时了，但是健身呢？每次都不到半个小时，阅读时间也很少。</p>

<p>我的收获就是以后尽量少浪费一些没必要的事情上，多健身，多看书。</p>

<p><strong>学会使用番茄工作法</strong></p>

<p>上半年工作一直都比较忙，几乎每天都有加班，怎么提高效率呢？刚开始我是用 GTD 的工作方式记录要做的所有事情，并且把事情排优先级，把脑子放空。但是这样效率并没有很大的提供，有时候是因为过度用脑，导致疲劳工作，有时候总是被打扰，进入不了工作状态。这种情况一直持续到我用了番茄工作法。</p>

<p>什么是番茄工作法呢？</p>

<p>我的理解是：设置一个时间段（默认是25分钟）专注的去工作，然后休息一小段时间（默认是5分钟），然后依次循环。</p>

<p>如何开始呢？</p>

<p>刚开始用的是<a href="https://pomotodo.com/">番茄土豆</a>这个工具，很不错，支持多平台，大多数功能免费，是这个软件让我了解了番茄工作法的工作流程。但是有一个缺点就是每次休息完了之后我就有点不想点下一个开始了，虽然有提醒我。</p>

<p>后来我又发现了 <a href="https://itunes.apple.com/cn/app/flat-tomato-time-management/id719462746?mt=8&amp;uo=4&amp;ct=other&amp;at=1010lmKs">Flat Tomato</a>，一款做工精美的番茄工作法 App，这款 App 颜值高、免费不说，而且功能我非常喜欢，一旦你点击第一个番茄之后下一个循环就全自动，直到你今天工作结束，手动停掉为止。</p>

<h2 id="section-2">总结</h2>

<p>时间是最公平的，无论你贫穷富贵，每个人每天都有且只有24个小时，那么如何利用这24个小时不断的成长，是你应该要掌握的。</p>

<p>我以前喜欢周末睡懒觉，有时候是一觉睡11点才起床，中午去吃个饭，从下午开始的一天过得非常快。后来的某一天觉得如果还这样继续下去的话，真是太浪费时间了。于是后来基本上周末8点左右就起床了。</p>

<p>时间这东西你越早掌握如何管理越早受益。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于三立三]]></title>
    <link href="http://blog.forecho.com/about-3li3.com.html"/>
    <updated>2016-05-22T04:29:22+00:00</updated>
    <id>http://blog.forecho.com/about-3li3.com</id>
    <content type="html"><![CDATA[<h2 id="section">引言</h2>

<p>项目上线之后有了一点点自由的零碎时间，再利用周末时间。于是就写了一个「监控你想要 App 降价或者限免的项目」，名字叫做<a href="http://3li3.com/">三立三</a>。</p>

<h2 id="section-1">关于三立三</h2>

<p>我是一个 App 狂热爱好者，经常会去少数派，AppSo 等网站上去看一下最新最好玩的 App，经常会看到他们有推荐一些
精品的 App 限免，但是一般 App 限免是有时效性的，意思是说他们写的文章的时候是限免的，但是我去读文章的时候兴高采烈的去
App Store 上准备下载的时候，那个 App 不一定还在限免。如果这个 App 对我来说不急着用的话，我肯定是希望在它最便宜或者最低价格的时候拿下。</p>

<p>所以我写了一个帮我监控 App 价格的项目，这个就是三立三诞生的主要原因。</p>

<!--more-->

<p>当然还有一些其他原因：</p>

<ul>
  <li>App Store 首页推荐的一些 App 还是挺有趣的，但是 App Store 的访问速度有时候真的不能忍受。</li>
  <li>AppShopper 的功能其实能满足我大多数需求，但是它没有价格走势，不支持中文搜索。</li>
  <li>…</li>
</ul>

<h2 id="section-2">如何使用？</h2>

<ul>
  <li>注册账号</li>
  <li>搜索想要监控「限免」或者「限免」的 App，点击想要。</li>
  <li>去「用户设置」中设置，填写 Email 通知地址。</li>
</ul>

<p>然后你就坐等 Email 通知的。如果你是高级玩家的话，推荐使用 Slack 通知。</p>

<p>网站目前还处于测试阶段，需要邀请码才能注册，如果你对本站感兴趣，欢迎写邮件索要邀请码，Gmail 邮箱 caizhenghai</p>

<h2 id="app">我不知道我想要哪些 App？</h2>

<p>可以去<a href="http://3li3.com/site/users">活跃用户</a>菜单栏看看别人正在想用什么 App。</p>

<blockquote>
  <p>三立三名字的由来：
刚开始花了很长时间写名字，一开始想在项目中带 App 字段，后来不想让这个项目局限于 App，所以决定域名不带 App。<br />
有一天无意中发现发现个网站<a href="http://minongbang.com/">米农帮</a>，通过搜索发现了 <a href="http://3li3.com/">3li3.com</a> 这个4位而且又好记的域名。<br />
于是名字就这么诞生了。</p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[项目 Beta 版上线总结]]></title>
    <link href="http://blog.forecho.com/beta-online-summary.html"/>
    <updated>2016-05-22T03:17:22+00:00</updated>
    <id>http://blog.forecho.com/beta-online-summary</id>
    <content type="html"><![CDATA[<h2 id="section">引言</h2>

<p>如果要用一个词来总结我的4月，那么就是两个「加班」。自从去年10月底进入新公司的一个月之后，开始进入全新的项目组进行开发工作。</p>

<p>第一版的任务比较多，一直处于赶进度的状态，去年基本上每天都有在加班。内测版上线的前一个星期我们连续工作了12天（那次周末两天都过来加班），
直到4月25号内测版上线那天晚上我们加班到第二天凌晨1点左右才下班。那天之后持续加班的日子总算熬过头了。</p>

<p>下面我要总结几条经验和教训：</p>

<!--more-->

<h2 id="section-1">需求详细设计文档的必要性</h2>

<p>首先立项的时候项目需求不是非常的明确，第一个月经常改需求，但是项目只给了2个月的时间，是非常的紧急，在这种需求不明确，还没有需求详细文档的情况下，开发进度肯定是非常缓慢的。
但是一旦产品经理给出需求设计详细文档开发起来会非常快的，我们以前公司产品是不写需求详细设计文档的，只有原型，呵呵。</p>

<p>需求详细设计文档看似是花费了产品的大量时间来编写，但是大大方便了开发和测试人员。如果没有需求详细设计文档，开发或者测试只会按照原型结合自己的思维方式来工作，所以需求详细设计文档保证了唯一性。
测试验收产品的时候也非常方便。</p>

<h2 id="section-2">合理的预估开发时间</h2>

<p>有一次产品急着要我们评估时间，然后我就没怎么看功能的细节，结果报了1天时间，最后等我去开发的时候，才发现里面有很多坑，1天是不可能完成的。最后因为我的原因没有按照时间完成今进度。</p>

<p>所以开发人员对于时间的预估这个也是非常重要的。需求过来之后首先你要基本预估一下时间，建议你不要很快的给出一个时间，而是仔细看一下需求，把每个需求拆分成最小颗粒的功能点，然后再去预估你开发每个功能点的时间，
最近把每个功能点相加再乘以2就是你的最终开发时间。</p>

<p>不要因为产品给的时间是明天你也给明天，如果你明天还是完成不了，那只会拖累整个项目的进度。一旦拖延次数多了，整个开发组的人都非常的被动。所以你首先要合理的给出
开发时间上报，如果时间产品那边接受不了，可以再商讨一下是不是可以通过加班赶一下进度或者说是否有必要砍掉不是必须要做的功能。</p>

<h2 id="section-3">标记优先级</h2>

<p>不管是需求还是 Bug 我们都应该标记优先级，标记「必须要完成的」和「可以延期处理的」，然后我们优先完成「必须要完成的」的。</p>

<h2 id="section-4">给测试一点时间</h2>

<p>到目前为止我们有两次上线的经历，但是为什么两次我们都是转钟1点钟才下班的呢？我认为原因有两点：</p>

<ul>
  <li>进入测试阶段我们还在改需求或者写需求。正常情况下这个阶段应该就是只改 Bug 的，如果你改在写需求或者改需求，那么项目肯定是不能按时完成上线的。</li>
  <li>测试时间给的太少。项目上线那天，最迟应该下午把所有 Bug 都改完了，然后就等着晚上上线。上线测试一遍，如果有 Bug，立刻改 Bug。</li>
</ul>

<p>以上就是这次项目的总结，希望以后工作尽量标准化，拒绝小作坊工作方式，拒绝不必要的加班。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如果是我来做项目经理]]></title>
    <link href="http://blog.forecho.com/if-I-was-a-project-manager.html"/>
    <updated>2016-03-01T12:56:22+00:00</updated>
    <id>http://blog.forecho.com/if-I-was-a-project-manager</id>
    <content type="html"><![CDATA[<h2 id="section">我所理解的项目经理</h2>

<p>以前的公司之前是没有项目经理的，只有产品经理，或者说，产品经理和项目经理是同一个人。</p>

<p>去年年底入职的这家公司，新项目的人员分配是这样的：包括项目经理和我在内的4个后端工程师（PHPer）都是新招来的。</p>

<p>从12月初到现在的3月初，不到3个月的时间（中间包括春节）项目现在进度终于接近尾声了，天天加班的日子应该算是熬到头了。</p>

<p>这期间我也算是对项目经理工作职位有了一定的了解，我认为一个项目的核心关键人物就是项目经理。</p>

<p>产品经理只负责整理需求，然后给出需求文档还有原型图。</p>

<p>开发工程师负责写功能模块，项目经理就是来分配任务和把控时间，可能会随身调整项目进度的人。</p>

<p>因为项目时间比较紧急，项目经理也参与了写代码。</p>

<!--more-->

<h2 id="section-1">乔尔测试</h2>

<p>乔尔测试是 Joel Spolsky 在2000年8月提出的一个超简单的软件团队质量测试方法（出自我春节看的《软件随想录 卷一》）：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">1. 你们用源码管理系统吗？
</span><span class="line">2. 你们能一键编译么？
</span><span class="line">3. 你们做每日编译么？
</span><span class="line">4. 你们有bug数据库么？
</span><span class="line">5. 你们在写新代码前修改以前的bug吗？
</span><span class="line">6. 你们的进度表是最新的么？
</span><span class="line">7. 你们有软件规格说明书么？
</span><span class="line">8. 程序员的工作环境安静吗？
</span><span class="line">9. 你们使用了能买到的最好工具吗？
</span><span class="line">10. 你们有测试人员吗？
</span><span class="line">11. 你们面试时会要求应聘人员写代码吗？
</span><span class="line">12. 你们做过走廊可用性测试吗？</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这篇文章距离现在已经快有16年了，但是有几条我认为对现在依然有用。（在这里我不得不佩服作者的思想，中文的世界真是太落后了）</p>

<p>这个测试不一定是100%有效，但是确实能看出一些情况。按照这三个月的项目经验，让我来一一回答这个他的问题：</p>

<p><strong>你们用源码管理系统吗？</strong></p>

<p>我们用的是 git。这个算通过了，但是比较坑爹的是团队里面不是每个人都会 git，但是身为一个项目经理你一定要玩转 git。</p>

<p><strong>你们能一键编译么？</strong></p>

<p>我们是 PHP，没有编译这一说，但是按照现在的这个尿性，我们肯定是不会一键 XX 的。</p>

<p><strong>你们做每日编译么？</strong></p>

<p>也没有这一说，但是我会每天下班之前把最新的代码 push 上去。</p>

<p><strong>你们有bug数据库么？</strong></p>

<p>有，用的是明道，公司一直在用这个，内部搭建的，凑合着用吧。</p>

<p><strong>你们在写新代码前修改以前的 bug 吗？</strong></p>

<p>不修改，我们都是先写功能最后在统一测试。但是现在是一个特殊时期，因为现在项目是从0到1的过程，以后肯定会先修改以前的 bug 在写新代码的。</p>

<p><strong>你们的进度表是最新的么？</strong></p>

<p>这个我认为是最坑爹的了，刚开始项目经理用软件画甘特图规划项目来着，但是真正开始写项目的时候，都没按照那个来，而且他画那个图我只
在我们开会的时候看过一次。所以我们从开始写代码之后就没有什么项目进度表了，也有可能项目经理自己有一份文档在更新吧，反正项目组的其他
成员是不知道项目进度的，也不知道什么功能做了什么功能没做，只知道个大概。</p>

<p>技术总监也老是在群里催进度啊。</p>

<p><strong>你们有软件规格说明书么？</strong></p>

<p>这个还是靠新来的产品总监给力，写了比较详细的需求文档。大部分功能都写了，也算比较详细，应该有80%了。</p>

<p>说实话这算是第一次看到需求文档的详细设计，之前的产品经理能给你画原型就不错了。</p>

<p><strong>程序员的工作环境安静吗？</strong></p>

<p>这个还算可以吧，办公室是大客厅，上班的时候自己待上耳机基本上就可以集中精力了，当然肯定是比不上晚上加班的安静。</p>

<p><strong>你们使用了能买到的最好工具吗？</strong></p>

<p>公司 Mac 都不给配置，双显示器都没有，主机配置倒是还可以，只能说一般，软件就不说了，在中国大家都懂的。</p>

<p><strong>你们有测试人员吗？</strong></p>

<p>这个有，但是都是功能性的测试，压力测试什么的还是考自己吧。</p>

<p><strong>你们面试时会要求应聘人员写代码吗？</strong></p>

<p>这个我们公司倒是没有，其实我也比较怕面试写代码，因为平常考 IDE 写代码依赖性太强了，很多东西记不住。</p>

<p><strong>你们做过走廊可用性测试吗？</strong></p>

<blockquote>
  <p>走廊可用性测试是指，你随便从走廊抓过来一个路人，然后要求他们试用你刚写的程序。如果你这样测试了5个人，你能发现产品在易用性方面95%的问题。</p>
</blockquote>

<p>答案是没有，但是公司老板对交互这块倒是很看重。</p>

<h2 id="section-2">项目遇到的问题</h2>

<ul>
  <li>前期需求讨论、整理和确定花了不少时间，让团队每个人都能快速理解需求不是一个简单的事情。</li>
  <li>项目时间比较紧急，项目组人员都是新人，大家都是工作过几年的程序员了，每个人都有自己的一套编程风格了，但是大家都在赶功能，
前期可能还会帮助那些没有按照规范写代码的同事修改一下代码，后面我也懒得管了，只要功能保证就可以了，所以这次的项目代码风格会有好几套。</li>
  <li>没有进度表。之前我有介绍项目经理使用一些团队协作平台，不知道是不会用还是是没时间用，反正没用起来，我一个人用也没有用。</li>
  <li>前端工程师缺人还搞前后端分离，所以现在项目是一个 restful 项目和一个 PHP 调用 restful 的项目，所以你会发现我们项目进度比较慢也有一部分是这个原因，有时候你会重复写两套代码。
我觉得这样的架构对以后维护来说是一个坑。</li>
  <li>团队中有2个 PHPer （一共是4个 PHPer，后来又加一个 PHPer）不会使用我们选择的 Yii2 框架。项目这么急，是不会给你多少时间学习框架的。</li>
</ul>

<h2 id="section-3">如果我来做项目经理/产品经理</h2>

<ul>
  <li>首先我认为一个项目经理的技术一定要过硬才行，就目前我的技术来说，还是不行，我打算至少做技术到30岁再考虑其他事情吧。</li>
  <li>沟通能力。做技术的一天到晚都对着电脑，都是不太擅长说话，但是做了项目经理/产品经理少不的要与人沟通，所以这个必须要注意加强学习。</li>
  <li>主动性。有时候要经常拉大家开会，讨论项目什么的。</li>
  <li>善用团队协作工具。我认为这个还是有必要的，不要什么工具都不用，感觉想是软件小作坊，大公司都会有专门的部门为公司内部写工具。</li>
  <li>多看书。保持一个持续学习的心态，也要经常去关注行业最新动态，干 IT 这一行新技术穷出不断，有的你玩。</li>
  <li>保持热爱。我们一生要工作很久很久，只有做你最热爱的工作你才不至于那么累，能会开心，有激情，有成就感。</li>
  <li>有好奇心。热爱一些新出来的产品，乐于去尝试新技术、新产品。这个自认为还可以，经常写代码写累了就去看一下 GitHub 和 Product Hunt 的排行榜去看看。</li>
</ul>

<p>以上就写这么多吧，最后送给大家一句乔布斯的名言：「Stay hungry, stay foolish.」</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[春节二三事]]></title>
    <link href="http://blog.forecho.com/about-spring-festical.html"/>
    <updated>2016-02-15T08:12:32+00:00</updated>
    <id>http://blog.forecho.com/about-spring-festical</id>
    <content type="html"><![CDATA[<p>这个春节公司很给力，放了12天假，虽然年前和年后都要补假😂。但是我还是请了4天假，带着女朋友提前回了家。</p>

<p>而恰巧那天老家下大雪，下了差不多一天，冷死了。到家之后我们还在家楼顶推了个小雪人。</p>

<p>前两年盖的楼房，去年年底特意装修了一下，回家的那天爸爸请了幺爷和姑爷一起帮忙做了沙发。</p>

<p>天气太冷，我们只能在房间烤火看之前电脑下载好的电影，虽然客厅有一个电视，但是没沙发还没做好。做沙发花了三天时间。</p>

<!--more-->

<p>坑爹的是村里联通3G 信号都没有，呵呵。不过今年发现村里好几家都牵网了，而且我回来发现有一个网速还特别快，
但是离我家稍微有点远。</p>

<p>然后就是送走女朋友回家过年，然后在武汉的时候跟大学的室友聚餐了一次，这次聚会不容易，从我去深圳那一刻开始起，我们之间有3年没见面了，之前约了至少3次没成功过。主要是因为他现在结婚而且有孩子了，时间已经不能完全自己能做主了，这个我能理解。时间也仓促，腊月28的，大家也赶着回家过年，我们简单的吃了个饭，随便聊了一下，然后在车站拍了照留念之后就各奔东西了，也不知道下次相聚是何时？</p>

<p>春晚从此变成了我们除夕的背景乐了。今年春晚真不好看，小品都不搞笑，也没看见沈腾的小品，没一个喜欢的节目，往年春晚再怎么烂，至少有一两个节目好看。
今年除夕还有一个坑爹的是支付宝搞的集五福活动，真是坑爹，最后全国都在找「敬业福」。整个春晚微信，支付宝，QQ 都有红包，但是都只有几毛钱，呵呵😄。</p>

<p>今年打牌应该是没输钱，一般是第一天输钱第二天就赢回来了，期间输了最多的一次是输了400多，不过还好第二天又赢回来了。</p>

<p>差不多从初二开始几乎每天都有请酒接客吃饭的，不是结婚就是小孩办1岁宴席的，而且今年结婚村里流行搭 KTV 舞台，然后他们开始唱歌，那声音从村头传到村尾，生怕别人不知道你唱歌有多难听似的，折磨了我好几天，烦死了。</p>

<p>亲戚看到我带个眼镜，第二句就问我做没做手术，说现在谁谁眼睛近视了，然后就做手术好了。而且不止一个人这么说。我认为只要是手术就说明有风险的，而且我度数不高，没必要做手术。</p>

<p>比你大的，比你小的，陆陆续续都结婚了，甚至有比你小的孩子都几岁了，他们好像时刻在提醒着你该做什么事情了。</p>

<p>明天就要去深圳了，意味着新的一年开始了，要有新的计划了，打算做出点成绩出来，多赚点钱吧。</p>

<p>总结一下整个春节的战绩：</p>

<ul>
  <li>回家前几天下载好的几部电影，一个不剩全部看完了。</li>
  <li>带回去的 Kindle，看了两个晚上，其中一本书快看到一半了。</li>
  <li>带回去的《软件随想录 卷一》看了三篇文章，有所收获。</li>
  <li>补完了几篇博客的文章。</li>
</ul>

<p>最后给大家推荐一部电影叫《心迷宫》，拍的很好，话说这部电影出来的时候我咋不知道呢？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub 单独设置某个项目的配置信息]]></title>
    <link href="http://blog.forecho.com/github-use-token-push.html"/>
    <updated>2016-02-15T07:08:12+00:00</updated>
    <id>http://blog.forecho.com/github-use-token-push</id>
    <content type="html"><![CDATA[<h2 id="section">场景</h2>

<p>我们先这种情况的谈谈这个使用场景，你不一定用得到这个方法。</p>

<p>A 拿 B 电脑打算使用一段时间，A 用 git clone 了一份自己的代码，想用 B 电脑写一些代码。但是 B 平常也写代码，B 电脑上有一套自己的 git 环境.</p>

<p>那么问题来了，我们要怎样在不修改 B 电脑全局环境的情况下使用 GitHub？</p>

<h2 id="email">单独为项目配置用户名和 Email</h2>

<!--more-->

<p>针对每个项目，单独设置用户名和邮箱，设置方法如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">cd</span> ～/test // git检出目录
</span><span class="line">git config user.name <span class="s2">&quot;your_name&quot;</span>
</span><span class="line">git config user.email <span class="s2">&quot;your_email&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>相应的变量要替换成你自己的信息。</p>

<h2 id="token-">单独设置 token 推送代码</h2>

<p>我记得以前只要是使用 HTTPS 协议的 GitHub 项目，推送的时候会问你账号密码，但是也不知道这次是不是我使用
的这台电脑已经有 ssh 的原因，push 的时候提示我403错误，没有权限，我项目使用的 URL 明明也是 HTTPS。</p>

<p>Google 了半天，最后终于找到解决办法，就是单独生成一个 token，Git remote 的 URL 设置成</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">git remote <span class="nb">set</span>-url origin https://&lt;token&gt;@github.com/forecho/blog.git
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>其中的 token 你要自己去 GitHub 生成，地址是 <a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a></p>

<p>然后你就可以愉快的 push 代码了，不需要输入账号密码。</p>

<p>参考文章：<a href="https://github.com/blog/1270-easier-builds-and-deployments-using-git-over-https-and-oauth">Easier builds and deployments using Git over HTTPS and OAuth</a></p>

<h2 id="section-1">总结</h2>

<p>出现以上原因只是因为对 Git 以及 GitHub 命令不算很熟悉。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我为什么离职？]]></title>
    <link href="http://blog.forecho.com/why-leave.html"/>
    <updated>2016-01-30T07:28:58+00:00</updated>
    <id>http://blog.forecho.com/why-leave</id>
    <content type="html"><![CDATA[<h2 id="section">上个公司</h2>

<p>2015年10月份的时候提出离职，11月份正式离职，离开了待了2年的公司。</p>

<p>现在回忆起，面试的时候我还记得很清楚，是2013年十一刚过完，我面试的第一家公司，是 Allen 面试的我，差不多面试完了
就确定要我了，公司虽然不大，但是看气氛感觉还可以，所以就决定接受那个工作了。</p>

<p>后来事实也证明公司的气氛确实还不错，公司也在13年底的时候搬进了腾讯大厦的旁边，新的办公室确实很不错，占有一层楼的一半。
但是我还是不喜欢那个有隔板的办公桌，因为让人感觉不到是互联网公司。</p>

<p>刚开始进公司，公司给安排让我个新项目的，然后让我想设计文档，但是后来不知道怎么的，这个项目就没有然后了。</p>

<p>紧接着搬家之后，我进入了一个刚开始只有2个人的项目组，然后产品经理开始陪着我们3个人开始加班，曾经加过2个通宵班赶项目，
项目方向大调整，并且那个时候只有我们三个人，而且都是 PHP。</p>

<!--more-->

<p>再后来2014年年后项目的主程突然说要走，产品经理也换了一位，压力留给了剩下的我们俩，不过还好 Allen 之前的外派工作结束，回到公司，进入我们项目组。</p>

<p>然后我们项目又是三个人支撑了很久，4月份的时候招来了一个前端妹子（已经是我的女朋友了），直到这个时候我们才有了真正的前端啊。</p>

<p>公司的 PHP 还是很多的，有20多个吧，刚开始的时候每个人组还经常开一下早会，向大家汇报一下「自己昨天做了什么，今天要做什么」，有时候会玩一下小游戏活跃一下气氛。</p>

<p>水果零食的话，以前是一个月一次，每月25号，生日会的时候，后来每月15号时候也有了。</p>

<p>曾经也提唱过搞分享会，但是很难落实，直到我们部门（技术部）招聘了一个自己部门的行政助手才算有人去落实下去，每周都会有分享会。</p>

<p>也提唱过技术部买书，我书单都提交好了，但是后来又说不给买，后来想「也不差那点钱，自己买吧。」，直到15年年中的时候差不多才看到新买来的书柜，
然后陆陆续续买了一些书，放上去，但是没几本我想看的，后来我申请买5本书，邮件都发了，一个多月了，直到我离职我想看的书还没消息。</p>

<p>我们的老板之一 Mic，是程序员出身，所以公司对程序员还挺好，内存不够？加。要双显示器？买。机械硬盘太慢？换 SSD。每个月每个项目组组长都要做预算上报，这个时候就是申请设备的好时候。</p>

<p>工资太低？跟老大谈谈，一般都会加，但是要等到指定日期。公司每年两次涨薪机会，要抓好机会，跟是老大提，不然的话，工资涨的不多。</p>

<p>刚开始有两个项目组，一个是以前公司主打的「社会化电商系统」，再后来就是我们 o2o 的新项目组，再后来我们承包了高朋的 o2o 项目组，再后来也把高朋的团购也承包过来了，
公司开始砍掉社会化电商组，新建一个 o2o 大客户项目组。人员重新打散再分配，项目组也有原来的横向分配，改成纵向分配。高朋的 o2o 项目组跟我们之前自己的o2o 项目合并。</p>

<p>团购组不变，大客户组不变，其他新建的组有：基础平台组（我后来主动申请到这个组的），基础业务组，售后组，xx组 。当然我说的都是 PHP，设计、测试、运维、前端组什么的差不多都有。</p>

<p>公司后来招人做微信企业号我就有点看不懂了，现在才开始做是不是有点晚了？而且我觉得公司产品太多了也不好，容易分散精力。</p>

<h2 id="section-1">为什么离职</h2>

<p>主要原因是做的不开心，工资给少了，公司员工普遍工资低。一直没有弹性工作时间，加班也只有15块钱的餐补，第二天9点上班，9点过1分打卡就算迟到。</p>

<p>对公司没有归属感，反正感觉自己在给老板打工。公司好不好跟自己毛的关系都没有，每月都拿着死工资。每天一开机一关机，一天就过去了。</p>

<p>对公司的动态不太了解，有时候自己都不知道公司在干啥，老板也不出来跟我们开开会什么的。2年了，除了年会就只有一次老板给我们开过会。</p>

<p>有时候就想，程序员最辉煌的时候什么时候？我觉得是工作3年到5年。为什么这样说？1-3年工作经验少，找工作比较难，那个时候是公司挑你，当然你也可以在几个公司里面挑一下。3年工作经验就不怕找不到工作了，大部分都是你挑公司。工作5年之后你对薪水的要求就高了，但是大部分都是小公司，大公司毕竟说少数，小公司一般只要2、3个大牛就够了，内推的比较靠谱点，你工资开高了人家还要不起你。</p>

<p>我上家公司一直还在招人，但是一直招不到人。主要是工资给人家的少，现在的市场价上涨的很快。当然也不是面试的人说多少，你就给人家多少，这个还是要看能力的。</p>

<h2 id="section-2">现在的公司</h2>

<p>找工作的时候我也想这个公司氛围好的，公司大不大无所谓。对现在的公司还算比较满意。</p>

<p>刚开始去的时候我们技术部每天有1小时的弹性工作时间，就是说10点之前打卡都可以，但是现在改成9点半了，这个还能接受。每天最烦的就是上班高峰期挤地铁然后还迟到了1分钟，一整天的心情都坏了。现在有了弹性时间就可以错开高峰期了。</p>

<p>每周三早上公司开早会，轮流每周一个人分享会，我觉得这个算是企业文化，挺好的。有时候老板会上去说说话，让我感觉不至于离老板很远。这天要早点去公司，8点45就要开早会，如果迟到的话，要交罚款，然后今天就有下午茶了，我都「捐助」过两次💔。</p>

<p>老板是一个很会说话的人，虽然不懂技术，然后个子不高。比方说：某次开会的时候亲自给一个同事发了5000的红包，因为她推荐了一个程序员转正了。再比如：某次开会老板给几位总监每人厚厚的红包，因为他们几个在公司处于财务困难期的时候主动提出降薪，帮助了公司度过困难期，现在老板拿到投资了，公司也开始盈利了，老板要还他们两倍的红包。</p>

<p>公司老板在汽车行业待了十几年了，做人比较舍得，看中人才。</p>

<p>说了这么多好处，下面也来谈谈不好的地方：</p>

<p>公司给程序员配置的电脑不够好，SSD 算是有了，但是显示器非常的垃圾，好像是19寸，而且只有一个。公司年前才搬新家，之前想着是搬家之后提出申请设备的，看来是要等年后了。</p>

<p>没发现公司有图书馆，不知道有没有图书步骤这一说。</p>

<p>公司现在项目代码写的非常垃圾。我们项目组老大让我们把代码写的漂亮点，而且我们还做了项目分层架构，为了后期维护。老大还希望我们互相 review 代码。但是事实是，项目时间进度非常紧张，从项目需求讨论到确定需求，然后上线，老板只给了我们2个月的时间，而且中间包括12天的过年假期。review 肯定是不可能了，代码风格能统一就已经非常不错了。架构做了分层处理，要做的事情就是双倍了。在中国做程序员就是这样的悲哀。</p>

<h2 id="section-3">总结</h2>

<p>以上就是「我为什么要离职？」，有回忆，也有吐糟，好像也有点跑题。2016年我依然希望成为独立开发者。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于 PhpStorm 的小技巧]]></title>
    <link href="http://blog.forecho.com/tips-about-phpstorm.html"/>
    <updated>2016-01-29T08:36:58+00:00</updated>
    <id>http://blog.forecho.com/tips-about-phpstorm</id>
    <content type="html"><![CDATA[<h2 id="section">前言</h2>

<p>如果一个工具是你每天工作都必须要用的，请认真阅读官方文档，花几个小时好好研究使用技巧，这将为你以后工作带来很高的效率。</p>

<p>这篇文章内容其实很早就在我印象笔记里面了，今天整理出来，分享给大家。</p>

<h2 id="section-1">快捷键</h2>

<p><strong>常用快捷键</strong></p>

<ul>
  <li>全局搜索文件  按两下shift</li>
  <li>显示项目类列表 alt + 1</li>
  <li>显示方法列表  alt + 7</li>
  <li>全局搜索类 ：ctrl+n</li>
  <li>更新注释：alt+enter</li>
</ul>

<!--more-->

<p><strong>Mac 快捷键</strong></p>

<ol>
  <li>显示或者隐藏左边栏：command+1</li>
  <li>查找文件名：command+shift+o</li>
  <li>查看文件结构：command+F12</li>
  <li>查看函数、方法：command+alt+o</li>
  <li>关闭所有文件的时候 command+↑ 、command+n 快速新建文件</li>
  <li>command+e 查看历史打开文件</li>
  <li>Live  Templates：先选中一个模板，再按两下 shift ，再输入 「Live」找到「Save as Live  Templates」就可以新建一个模板</li>
  <li>alt+command+L 格式化代码</li>
  <li>代码块转换成独立方法：control+t</li>
  <li>函数操作 command+n / control+enter</li>
  <li>方法参数操作：alt+enter</li>
  <li>调用其他类的时候自动use：设置-》搜索「Import」勾选「Enable auto-import in namespace scope」</li>
  <li>多个光标：按住 alt 健点击鼠标</li>
  <li>多选：control+g</li>
  <li>分屏：「Window」-》「Editor Tabs」-》Split XX</li>
  <li>设置命名空间：设置-》Directories-》Sources-》p</li>
</ol>

<p><strong>Windows 快捷键</strong></p>

<ol>
  <li>项目名右键选择”Local History -&gt; Show History”可查看本地修改记录</li>
  <li>Ctrl + E 可查看最近打开文件或项目</li>
  <li>打开File -&gt; Setting -&gt; Editor，选择Appearance下面的Show Method Separators。它会将你的代码按方法，用灰色线框进行智能分割。你还可以使用：alt+↑或↓，在方法之间进行跳转</li>
  <li>Ctrl + Shift + V，可选择要粘贴的最近内容</li>
  <li>Ctrl + D，复制粘贴选中的文本</li>
  <li>Ctrl + Y，删除当前行或选中行</li>
  <li>Ctrl + Alt + 左右方向键，定位到上一次编辑的位置</li>
  <li>Alt + 上下方向键，跳转到上/下函数</li>
  <li>Alt + 左右方向键，导航标签切换</li>
  <li>Ctrl + N，根据类名称查找</li>
  <li>Ctrl + Shift + N，根据文件名查找</li>
  <li>Ctrl + Shift + Alt + N，根据函数名查找</li>
  <li>Ctrl + Shift + F，Find in Path</li>
  <li>Ctrl + Shift + I，查看变量初始化的值</li>
  <li>Ctrl + F12，快速查看当前文件的所有方法</li>
  <li>Ctrl + /，单行注释</li>
  <li>Ctrl + Shift + /，多行注释</li>
  <li>修改默认打开的文件模版：”file” —&gt; “setting” —&gt; “file and code template”</li>
  <li>/** + Enter 或者  /** + 空格键，自动生成注释</li>
  <li>Ctrl + Alt + L，格式化代码</li>
  <li>选中文件或者文件，Alt+Insert 新建文件</li>
</ol>

<p><strong>更换为 sublime 快捷键</strong></p>

<p>因为以前用习惯了 sublime，改不过来快捷键方式了，所以但是了这个项目 <a href="https://github.com/forecho/PHPStorm-Config">PHPStorm-Config</a></p>

<h2 id="section-2">其他</h2>

<p><strong>视频教程</strong></p>

<p><a href="https://laracasts.com/series/how-to-be-awesome-in-phpstorm">https://laracasts.com/series/how-to-be-awesome-in-phpstorm</a></p>

<p><strong>换主题</strong></p>

<p><a href="http://daylerees.github.io/">http://daylerees.github.io/</a>
<a href="https://github.com/daylerees/colour-schemes">https://github.com/daylerees/colour-schemes</a></p>

<p>添加主题：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd ~/Library/Preferences/WebIde80/colors
</span><span class="line">wget https://raw.githubusercontent.com/daylerees/colour-schemes/master/jetbrains/yule.icls</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>安装插件</strong></p>

<ul>
  <li>command+shift+a 输入 plugins</li>
  <li>点击 Browse Repositories</li>
  <li>输入 color 选择 color ide 安装 重启IDE</li>
</ul>

<p><strong>更换新建文件模板</strong></p>

<p>Setting -&gt; File and Code Templates</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/**
</span><span class="line">* author     : forecho &lt;caizhenghai@gmail.com&gt;
</span><span class="line">* createTime : ${DATE} ${TIME}
</span><span class="line">* description:
</span><span class="line">*/</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何阅读一本书]]></title>
    <link href="http://blog.forecho.com/how-to-read-a-book.html"/>
    <updated>2016-01-29T07:36:58+00:00</updated>
    <id>http://blog.forecho.com/how-to-read-a-book</id>
    <content type="html"><![CDATA[<blockquote>
  <p>大致翻译了一下，有些没看懂。😓</p>
</blockquote>

<h2 id="section">买更多的书</h2>

<p>每次买3-10本书，至少让自己有5本待读的书，让自己找不出「没有书可以读」的借口。</p>

<h2 id="section-1">一次读三本书</h2>

<p>同一时间阅读三四本书，可以根据自己的心情和天气，小说和非小说类型随时切换着看。</p>

<p>第一本书卡住了，可以看第二本书。</p>

<!--more-->

<h2 id="section-2">喜欢它，讨厌它，摧毁它。</h2>

<p>你可以完全不用按照页码的方式去阅读。用你想阅读的方式去阅读。这本书是你的，你想怎么用就怎么用。</p>

<p>如果你不喜欢某个页面，扯开。如果你不喜欢一个章，跳过它。如果你想浏览一本书，阅读你感兴趣的章节，想做就做，下一本书。不要感到内疚。</p>

<h2 id="section-3">快速决定</h2>

<p>如果你开始读一本书，你觉得你不喜欢它。把它放在一边一段时间，开始一个新的。一个月后试着用不同的心态再去读一遍。</p>

<p>如果你仍然不能读，当礼物送给朋友，然后忘记它。不要因为你买了它就代表着你必须要看完。大多数人都被一本书卡住了不能做其他事情。</p>

<h2 id="section-4">你自己做决定</h2>

<p>一本书总是像你想的那么好。买家的评论很好，但即使我们都买了同一本书，我们会读一个不同。书是很神奇的，阅读和解释它们根据情况我们完全不同。</p>

<h2 id="section-5">总是带一本书</h2>

<p>每次你在公共汽车/火车/午餐休息看手机，你也可以改变去读3页的书。</p>

<h2 id="section-6">我的技巧「阅读」两次。</h2>

<p>看书对我们两次有神奇的效果。我们第一次读一本书我们经常关注作者的故事和事件。</p>

<p>第二次我们读一本书与更深的情感层面。</p>

<hr />

<p>这七个规则不仅帮助我阅读更多，而且更有效率。</p>

<blockquote>
  <p>来源 <a href="https://medium.com/desk-of-van-schneider/how-to-read-a-book-ee402ff8e754#.wrr4epava">How To Read A Book</a></p>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 添加打赏]]></title>
    <link href="http://blog.forecho.com/octopress-add-donate.html"/>
    <updated>2016-01-28T07:36:58+00:00</updated>
    <id>http://blog.forecho.com/octopress-add-donate</id>
    <content type="html"><![CDATA[<h2 id="section">前言</h2>

<p>本来今天是打算给博客添加一个打赏功能的，但是搜索了一下没发现 Octopress 有这个插件，然后就不知道怎么得就折腾 CC 协议插件了。</p>

<p>在折腾的过程中，我突然就学会写插件了，其实很简单。然后我就搜索到一个 hexo 打赏插件（因为懒得写样式和布局），经过几次修改，Octopress 打赏插件就这样诞生了。</p>

<h2 id="section-1">如何添加</h2>

<!--more-->

<p>主要分四步：</p>

<ul>
  <li>添加 <code>source/_includes/post/donate.html</code> 文件，内容可以使用我的 <a href="https://github.com/forecho/blog/blob/master/source%2F_includes%2Fpost%2Fdonate.html">donate.html</a></li>
  <li>修改 <code>sass/custom/_styles.scss</code> 样式文件，添加<a href="https://github.com/forecho/blog/blob/master/source%2F_includes%2Fpost%2Fdonate.html">样式代码</a>，样式代码有点挫，是因为我不会 scss。</li>
  <li>修改 <code>source/_layouts/post.html</code> 布局文件，添加<a href="https://github.com/forecho/blog/blob/master/source%2F_layouts%2Fpost.html#L9-L11">代码</a>。</li>
  <li>修改 <code>_config.yml</code> 配置文件，添加<a href="https://github.com/forecho/blog/blob/master/_config.yml#L138-L140">代码</a>。</li>
</ul>

<p>以上操作完成就可以了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 添加 CC 协议]]></title>
    <link href="http://blog.forecho.com/octopress-add-cc-license.html"/>
    <updated>2016-01-28T05:08:58+00:00</updated>
    <id>http://blog.forecho.com/octopress-add-cc-license</id>
    <content type="html"><![CDATA[<h2 id="section">前言</h2>

<p>如果你不知道什么是 CC 协议，或者你不知道选什么协议，请访问<a href="http://creativecommons.org/choose/">Choose a Licens</a>（内容是中文的）。</p>

<h2 id="section-1">如何添加</h2>

<p>我基本上是使用插件 <a href="https://github.com/hoatle/octopress-cc-license">hoatle/octopress-cc-license</a> 完成的此功能，但是稍作修改，汉化了内容。</p>

<!--more-->

<p>主要分四步：</p>

<ul>
  <li>添加 <code>source/_includes/post/cc_license.html</code> 文件，内容可以使用我的 <a href="https://github.com/forecho/blog/blob/master/source%2F_includes%2Fpost%2Fcc_license.html">cc_license.html</a></li>
  <li>修改 <code>sass/custom/_styles.scss</code> 样式文件，添加<a href="https://github.com/forecho/blog/blob/master/sass%2Fcustom%2F_styles.scss#L22-L38">样式代码</a>。</li>
  <li>修改 <code>source/_layouts/post.html</code> 布局文件，添加<a href="https://github.com/forecho/blog/blob/master/source%2F_layouts%2Fpost.html#L12-L14">代码</a>。</li>
  <li>修改 <code>_config.yml</code> 配置文件，添加<a href="https://github.com/forecho/blog/blob/master/_config.yml#L118-L136">代码</a>。</li>
</ul>

<p>以上操作完成就可以了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年我都看了哪些片]]></title>
    <link href="http://blog.forecho.com/review-of-2015-watching.html"/>
    <updated>2016-01-26T07:28:58+00:00</updated>
    <id>http://blog.forecho.com/review-of-2015-watching</id>
    <content type="html"><![CDATA[<p><img src="http://i8.tietuku.com/7f1abeefa4ae0ad5.png" alt="" /></p>

<h2 id="section">前言</h2>

<p>2015年6月底的时候我买了一个天猫魔盒，花了我接近200元大洋。自从有了这个智能盒子，我另外一个本来用来写双屏写代码的 Dell 显示器就基本上很少接 MacBook 了，全用来看片了。基本上每个周末都必看至少一部电影，谁让我特别喜欢看电影。</p>

<h2 id="section-1">电影</h2>

<p>根据之前知乎回答得出2015年最佳十几部以下电影：</p>

<!--more-->

<ul>
  <li>《王牌特工》</li>
  <li>《夏洛特烦恼》</li>
  <li>《火星救援》</li>
  <li>《蚁人》</li>
  <li>《头脑特工队》</li>
  <li>《我是谁：没有绝对安全的系统》</li>
  <li>《速度与激情7》</li>
  <li>《我的个神啊》</li>
  <li>《模仿游戏》</li>
  <li>《疯狂的麦克斯4：狂暴之路》</li>
  <li>《解救吾先生》</li>
  <li>《极速风流》</li>
  <li>《十二公民》</li>
  <li>《烈日灼心》</li>
  <li>《心迷宫》</li>
  <li>《误杀蛮荒记》</li>
</ul>

<h2 id="section-2">美剧</h2>

<ul>
  <li>《硅谷 第二季》：第一季都没看过瘾，这季看完依旧没过瘾，期待第三季</li>
  <li>《毒枭》：看完第一集我就被吸引到了。</li>
  <li>《南方公园》：在 B站发现的，早就听说它的名气了，程序员大牛都在看，已经出到十几季了。刚开始看的时候，我内心是拒绝的，这画风渣渣啊，但是看了一集之后就爱上了，因为故事讲的好啊，把美国人擅长的讽刺技能表现的淋漓尽致，看完之后让人深思。</li>
  <li>《马男波杰克》：刚开始看介绍有点不能接受这个画风，但是看了一集之后，立马就跟着看了。感觉每一集都有着深刻的意义。</li>
  <li>《咱们裸熊》：是从知乎得知这个的，很萌很搞笑，一口气看了8集。</li>
  <li>《日常工作》：每一集一个故事，挺搞笑的。</li>
</ul>

<h2 id="section-3">日漫</h2>

<p>2015年自从看完《JOJO》之后好像没有什么值得非常让人追的新番了，所以我转战看「美漫」了。比方说<a href="http://movie.douban.com/subject/20434014/">《日常工作》</a>，</p>

<p>最近好像有一部叫《亚人》可看性还不错。<br />
《一拳超人》算是最火的新番了吧。<br />
《暗杀教室》改名叫《急速老师》了，为了引进，B站好像买了版权。<br />
《火影忍者》一直在回忆没法看了，《海贼王》进度太慢了，不过正精彩。<br />
《数码宝贝》新版终于出来了，但是太少了，根本没看过瘾。</p>

<h2 id="section-4">其他</h2>

<ul>
  <li>《暴走大事件》：一个非常好，而且还有良心的节目，比《万万没想到》系列要好很多倍。</li>
  <li>《罗辑思维》：一般都是上下班的路上听一下他们的播客。</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年终总结]]></title>
    <link href="http://blog.forecho.com/review-of-2015.html"/>
    <updated>2016-01-26T07:28:58+00:00</updated>
    <id>http://blog.forecho.com/review-of-2015</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">前言</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">生活</a></li>
  <li><a href="#section-2" id="markdown-toc-section-2">工作</a></li>
  <li><a href="#section-3" id="markdown-toc-section-3">业余折腾</a></li>
  <li><a href="#section-4" id="markdown-toc-section-4">读书</a></li>
  <li><a href="#section-5" id="markdown-toc-section-5">败物</a></li>
  <li><a href="#section-6" id="markdown-toc-section-6">博客</a></li>
  <li><a href="#section-7" id="markdown-toc-section-7">爱情</a></li>
  <li><a href="#section-8" id="markdown-toc-section-8">展望</a></li>
</ul>

<h2 id="section">前言</h2>

<p>每年年终的时候都在感叹时间的过的飞快，我认为25岁到30岁应该算是人生中的一个黄金5年，那么这一年我都干了些什么呢？</p>

<h2 id="section-1">生活</h2>

<ul>
  <li>生活依旧，喜欢就买，想吃就吃。唯一不一样的是，2015年早起的情况变少了。</li>
  <li>有过一次租车自驾游去杨梅坑海边玩的经历，但是记得那天天气不是很好，玩的不够开心。</li>
  <li>2015年平常周末出去玩的情况变少了，人也懒得许多。</li>
  <li>兔子公司旅游，我跟她们公司一起去了一趟珠海长隆，玩的很开心。</li>
  <li>国庆的时候陪兔子回了一趟她的老家，玩了几天。</li>
  <li>在图书馆借了一年的书，我们没两个月周末去一次宝安图书馆，借还书。</li>
  <li>我跟着公司去长沙出差了3天。</li>
  <li>好像去会展中心参加了几次展览。</li>
  <li>一个小叔因为一次意外去世了，我请了几天假期，回了一趟老家。</li>
  <li>跳槽之后跟着新公司同事一起去杨梅坑一日游，打了真人 CS，坐了快艇🚤。</li>
  <li>元旦带兔子去广州玩了一趟。</li>
  <li>家里的房子简单的装修了一下，幺爷帮忙做了一套沙发，客厅里有了沙发好舒服的感觉。</li>
  <li>带兔子回老家。</li>
</ul>

<!--more-->

<h2 id="section-2">工作</h2>

<p>9月份的时候实在忍受不了每天上班为了不迟到而跑着去公司的情况，就有了跳槽的想法了，陆陆续续的投了几个简历，面试了两家，成功了一家，心动了。纠结了几天之后还是选择了跳槽。然后就这样离开了我之前工作快2年的公司了，有点依依不舍，毕竟在公司待了这么久了，跟同事和公司都有感情了，我也算亲眼见证了公司的成长。但是跳槽是必然的，公司涨工资的速度永远比不上市场价格。</p>

<h2 id="section-3">业余折腾</h2>

<ul>
  <li>继续维护和升级 GetYii 项目</li>
  <li>做了一个<a href="http://1.forecho.com">1点</a>项目，代码没开源，使用这个项目写一个 restful API 接口</li>
  <li>利用一点项目的 restful API 接口写了一个 iOS App，功能虽然上非常的简单，一个列表页一个 Safari Controller 详情页，但是总算是 iOS 入门了。</li>
</ul>

<h2 id="section-4">读书</h2>

<p>详情看我单独写的一篇文章 - <a href="http://blog.forecho.com/what-i-read-in-2015">2015年我读了哪些书？</a></p>

<h2 id="section-5">败物</h2>

<ul>
  <li>买了一个 iPad mini，iPad Air 嫌弃太大太重了，给弟弟了。</li>
  <li>买了一个天猫盒子，因此也买了一个漫步者音箱。</li>
  <li>买了一个 Kindle Paperwhite 3</li>
  <li>给兔子买了一个 iPhone 6</li>
  <li>把长城宽带换成电信宽带了，每个月宽带费变成双倍了，因为电信坑爹的套餐绑定买了一台电信版的红米手机。</li>
  <li>花了几百块钱买了一个床垫</li>
  <li>买了一个空气加速器，但是用的次数比较少，本打算晚上睡觉之前用的，但是水滴声音有点吵。</li>
  <li>买了一个乳胶枕头，150，好像没什么特别的。</li>
  <li>双十一的时候，买了两副头戴式耳机，99块钱的那个超值，249块钱买了一个拜亚动力，什么时候有钱换一个 Bose 降噪耳机</li>
</ul>

<h2 id="section-6">博客</h2>

<p>看了一下，有2月、4月、5月、6月、8月、10月这几个月没写博客了，以后争取每个月至少坚持写两篇文章。最近把博客的 URL 也确定下来了，打赏和 CC 协议的插件也加上去了，以后还是安静的写博客才是主要的。</p>

<h2 id="section-7">爱情</h2>

<p>现在我们的感情更加深厚了，很多事情，不单单要从「我」的角度考虑了，要从「我们」的角度考虑。</p>

<p>虽然也超过几次架，但是我们基本上是让吵架不隔夜。</p>

<h2 id="section-8">展望</h2>

<p>2016年还只剩下11个月了，希望：</p>

<ul>
  <li>有时间把驾照拿到，驾照这东西越晚拿代价越高。我已经错过在大学时代拿驾照的最好时机了。</li>
  <li>带着兔子去日本玩一趟，圆了她的梦。</li>
  <li>争取把终生大事给办了。</li>
  <li>完成一个完整的 iOS App，上线。</li>
  <li>看10以上的书，书已经屯了不少了，但是很多书都没翻过。</li>
  <li>继续囚徒健身。</li>
  <li>继续做厨男。</li>
  <li>如果有钱的话，考虑买个车。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第五站：广州之旅]]></title>
    <link href="http://blog.forecho.com/guangzhou-trip.html"/>
    <updated>2016-01-26T07:28:58+00:00</updated>
    <id>http://blog.forecho.com/guangzhou-trip</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">前言</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">出发前的小插曲</a></li>
  <li><a href="#section-2" id="markdown-toc-section-2">出发第一天</a></li>
  <li><a href="#section-3" id="markdown-toc-section-3">第二天</a></li>
  <li><a href="#section-4" id="markdown-toc-section-4">第三天返航</a></li>
  <li><a href="#section-5" id="markdown-toc-section-5">总结</a></li>
</ul>

<h2 id="section">前言</h2>

<p>如果把跟公司一起去旅游不算的话，这一次应该是第三站。香港那次呢？香港那次根本不算旅游，就算逛街。</p>

<p>元旦期间我们上班上的很心烦，有出去走走散散心的想法，之前计划着去新加坡的，但是三天假，最后想想还是算了。
广州离我们比较近，坐城际列车就1个多小时，高铁就半个小时，而且怎么说也是省会，在网上看了几天攻略最后做了一个简单的攻略就这样去了广州。</p>

<h2 id="section-1">出发前的小插曲</h2>

<!--more-->

<p>2015年的最后一天，也就是说12月31号的时候，本来是一个很开心的日子，但是我们的心情热水器不用了给破坏了，折腾了半天算是修好了之后，最后发现
是煤气也没有了，但是这个时候我再去看时间已经是11点多了，想着送煤气的应该也是关门了还是打了电话问了他们是否还能煤气，连续打了两家，老板都说
送煤气的人都下班了，虽然是意料之中，但是还是得想办法解决洗澡的问题，明天我们早上9点多出发的票，总不能因为这个破坏了我们的旅行计划。抱着最后的
一丝希望，打了家里最后一个煤气名片电话，幸运的是，这家竟然还可以送煤气，当听到那句「可以」的时候，我内心的寒冷立刻有了温暖的感觉，而且这家煤气
竟然比我之前灌煤气的还要便宜10块钱，以后果断只用这家。</p>

<h2 id="section-2">出发第一天</h2>

<p>上面是一个小插曲，下面我们还是回到主题上来吧，虽然热水是有了，但是最后我们还是改签了，11点出发，下午12点多的时候
到了广州，下车之后我们直接去了第一个景点 - 越秀公园。</p>

<p><strong>越秀公园</strong></p>

<p>由于我们之前对广州的历史不是非常的了解，两个人之前也没去过，出地铁的时候我们差点被门口的一排乞讨者吓到，而且发现很多伊斯兰教的人，</p>

<p>越秀公园附件没什么吃饭的地方啊，中午到的广州已经有点饿了，最后没办法买了点小吃填肚子，然后就开始逛公园了，还好当天天气非常好，公园还是非常大的，
我们主要看了以下景点：</p>

<ul>
  <li>明代古城墙</li>
  <li>五羊石雕</li>
  <li>镇海楼</li>
  <li>广州美术馆（没开门，没去成）</li>
</ul>

<p><strong>北京路步行街</strong></p>

<p>兔子有一个同学正好元旦的时候跟她男朋友也去广州玩，然后我们就定在北京街聚一下。</p>

<p>如果我没记错的话，在这里有一个地铁口连接着的一个商场是卖动漫的，我们俩个被动漫吸引到了，然后去逛动漫商场，看到了很多手办，
然后还有扭蛋，手办很精美。最后我还给兔子买了一个她最喜欢的懒蛋蛋小挂件，逛完之后接着去了北京路。</p>

<p>所谓步行街其实都差不多，卖衣服，卖吃的。下午的时候我们就随便逛了下，没进店，在大众点评上找了一家广州特色店 - 點都德(聚福楼) 请他们吃了一餐饭，吃得还可以，但是我们点了太多特色小吃，吃的有点腻了。</p>

<p><strong>第一晚住宿</strong></p>

<p>由于之前没最终没确定我们第一天晚上会在哪儿，所以住宿地点我没有提前预定，再加上我之前也没有预定过酒店，所以这方面也没什么经验。吃完晚餐之后我们开始找住宿的地方，在美团上也找，但是大多数打电话过去都是客满，元旦毕竟算旅游高峰期，最后我们没办法就只有边走边找了，北京街附近的都是比较贵，200以上的环境不好，300以上也不怎么样，好不容易看了一家还算可以的，但是只有一间房间，四个人我们再接着边聊边找了，找了差不多2个小时，大家也都疲惫了，最终在一家酒店里准备将就一下了，住下来才知道房间不隔音，而且上午7点多的时候就开始有装修的噪音了，吵到兔子晚上没睡好，直接导致第二天上午非常的困，心情也随之变差。</p>

<p>之前还考虑第二天晚上也睡这的，但是早上的时候果断退房了。吸取教训我们第二天早上就在美团上定到了如家，而且比这个酒店要便宜。</p>

<h2 id="section-3">第二天</h2>

<p><strong>继续北京路</strong></p>

<p>第二天上午我们才算是好好逛了下北京路，北京路之所以这么出名是因为它有着悠久的历史。发现一个比较有逼格的书店，有4层楼高，叫什么名字忘记了。</p>

<p>在北京路，我买了一件外套；花了40扣钱刮了4张彩票，一分钱没中；吃了排了好长队才买到的长沙大肠，但是吃到1个半的时候就腻死了。</p>

<p>中午吃了一个难吃的鱼蛋粉，我们去了下一个景点。</p>

<p><strong>沙面</strong></p>

<p>沙面是一个不错的地方，有一个教堂，而且有很多人在那里拍婚纱照。</p>

<p><strong>上下九步行街</strong></p>

<p>逛了一下沙面之后就直接走去上下九步行街，其实也是一条街，而且路比北京路窄，所以很挤，我们没打算逛街，所以走的比较快，中途吃
了一个萝卜牛杂，还不错。</p>

<p><strong>西关</strong></p>

<p>跟着地图和路标一路走，我们来到了西关，虽然这个地方不大，但是我认为还是值得一来，很多广州特色小吃，只有在这里你才能吃得到。</p>

<p>第二天走了很多路。差不多也该回去了。</p>

<p><strong>住宿</strong></p>

<p>早上在美团上使用「快订」预定了我们的房间，晚上到了如家，直接报手机号码入住，挺方便的。房间也比之前的干净，比之前的大。隔音
效果也不错，放下行李，我们洗完一身汗，准备再次出发去下一个景点。</p>

<p><strong>小蛮腰</strong></p>

<p>特意选了离小蛮腰附近的酒店，就是为了方便。晚上吃了份饺子，我们就赶着去小蛮腰了。本来打算团购一张夜游珠江的，但是貌似我们出门
有点晚了，到了小蛮腰发现人很多，好像也停止售票了，不过之前也没打算上去。在附近拍了几张照，去珠江看了一下夜景，我们就回去了。</p>

<h2 id="section-4">第三天返航</h2>

<p><strong>红砖厂创意园</strong></p>

<p>兔子是在北京上的大学，去过北京著名的798，本以为红砖厂创意园应该是差不多的，但是实际上差得比较远，创意园还是很大的，但是
可看性还是太少了。我们看了两场个人展，逛了一小圈就撤了。</p>

<p><strong>方所</strong></p>

<p>这是一个很有逼格的书店，在太古汇的商场里面，之前在别人写的攻略里面看到的，很大，装修的风格还不错，不只是卖书，还有其他文艺
品，有很多英文书，可以直接买。</p>

<p>逛完之后什么都不买，然后准备坐车返回了，但是这个时候才知道要买票，有点晚了，但是也没什么办法了，我们在一个甜点店坐了一下，点了一份甜点，挺好吃的，但是也失败了点了一份特浓咖啡，而且还是双份，好难喝下去，点这个是因为我以为就是普通的两杯咖啡，装逼失败。</p>

<p>最后，旅行结束。</p>

<h2 id="section-5">总结</h2>

<p>总结才是这次旅游的意义。</p>

<ul>
  <li>旅行计划还是有必要的，之前在网上找了一些工具，试了几个，发现穷游网的行程助手是让我比较满意的，唯一不足的是对于广州省来说景点太少了，很多景点要添加的时候搜索不到。这个是我之前做的<a href="http://plan.qyer.com/trip/V2AJZlFnBzJTbVI9Cm0/">行程</a>，基本上一致。</li>
  <li>提前把住宿酒店订好，不能提前一天的话，半天也可以。住宿环境也很重要，房间不隔音，导致晚上睡不好觉，很影响第二天的游玩。反正这个住如家给我的体验还不错。</li>
  <li>要考虑饭点的时候周边是否有吃饭的地方。</li>
  <li>提前把火车票买好，然后离得比较近，但是人也比较多，不要以为离得近就部着急了，提前半天买票也可以，不要浪费无谓的等车时间。</li>
  <li>两个人出去玩，最重要的是开心。</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[去宝安图书馆借书]]></title>
    <link href="http://blog.forecho.com/go-to-the-baoan-library.html"/>
    <updated>2016-01-22T04:44:28+00:00</updated>
    <id>http://blog.forecho.com/go-to-the-baoan-library</id>
    <content type="html"><![CDATA[<h2 id="section">前言</h2>

<p>我从小就是个比较爱书的人，对图书馆非常的向往，大学之前一直没有那种条件 - 所在的城市没有图书馆。</p>

<p>大学的时候学校有个很大的图书馆，偶尔会去借书看。然后毕业之后，在武汉继续工作了一年，好像没发现图书馆，当然也没有刻意去找，但是我记得的是我们租住地方的附近，在我快要搬走之前有新搬来一个24小时移动图书馆，书虽然不多，但是让借书更加方便。</p>

<h2 id="section-1">与宝安图书馆结缘</h2>

<p>在上家公司的时候，无意中得知一个同事他在图书馆借书看，向他打听到了一些详细流程信息之后果断决定周末去办一张卡。</p>

<!--more-->

<p>深圳有很多个图书馆，到现在为止我只去过两个图书馆，一个是深圳图书馆，在会展中心，图书馆很大，人也多，但是离我们住的地方太远，去过一次。如果想办借书证的话，还是找一个家附近的吧，方便。于是就找到了宝安图书馆新馆，旧馆我没过去，新馆在宝华地铁站，地铁出门就是，很方便。</p>

<p>刚才翻了一下照片，发现我办卡都快1年了。下面是宝安图书馆新馆的照片：</p>

<p><img src="http://i8.tietuku.com/68687e6c1af11224.png" alt="" /></p>

<h2 id="section-2">办卡</h2>

<p>办卡非常的非常的简单的，图书馆有自动办卡机，有两种套餐：</p>

<ul>
  <li>用身份证免费办卡，之前是可以免费借2本书，但是从去年读书日之后开始升级为免费借5本。</li>
  <li>交100块钱押金用身份证办卡，机器会弹出一个读者证卡给你。之前是可以免费借5本书，但是从去年读书日之后开始升级为免费借10本。</li>
</ul>

<p>办卡两种套餐都是需要身份证的，这个要切记，办卡不需要人工，机器处理，分分钟解决，真是科技改变生活。
之前我办卡的时候免费版2本感觉不够，所以交了100块钱押金，就现在来看，免费版的5本书足够了。</p>

<h2 id="section-3">其他事项</h2>

<ul>
  <li>大部分书是可以借1个月的，杂志是15天，借书和还书是机器自动办理。</li>
  <li>每次借书可以续借一次，可以在网上直接操作，宝安图书馆网址是这个 <a href="http://balib.cn/">http://balib.cn/</a>。</li>
  <li>周一是闭馆的，节假日最好去<a href="http://balib.cn/balib;jsessionid=3B238DE62B7E22B9E04E750C3CDF1E16/category/152">官网</a>确认下是否开馆。</li>
  <li>开放时间：9:00-21:00</li>
  <li>可在全市其它已加入了公共图书馆统一服务平台的服务网点归还图书。</li>
  <li>读者所借图书、过刊、音像资料凡超过借阅期限未归还者即为超期；从超期之日起按实际超期天数交纳滞还费，按<strong>0.3元/天/件册</strong>收取，逾期滞还费的最高限额为每册10元。</li>
  <li>用微信公众号办理续借非常方便。</li>
  <li>更多常见问题可以看这里 - <a href="http://balib.cn/balib/message/q?id=178&amp;timer=16">常见问题</a>。</li>
  <li>我当初办卡的时候只有一楼一个小房间可以借书，但是后来，二三楼开放了，一下子多了好多书可以借。</li>
  <li>3楼有计算机类的技术书。</li>
  <li>有的书比较新，比方说去年10月才出版的，找书的时候，经常会有会意外惊喜。当然馆内也有电脑免费查找书。</li>
</ul>

<h2 id="section-4">总结</h2>

<p>读书让人进步，总的来说很感谢之前的那位同事。虽然我每次借书都是差不多2个月才还一次，虽然每次借书都不一定有时间看完，但是总比一点都不看好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你有几张「云」账单？]]></title>
    <link href="http://blog.forecho.com/how-much-i-spend-on-cloud-monthly.html"/>
    <updated>2016-01-18T05:14:28+00:00</updated>
    <id>http://blog.forecho.com/how-much-i-spend-on-cloud-monthly</id>
    <content type="html"><![CDATA[<p>看了罗磊的<a href="https://luolei.org/how-much-i-spend-on-cloud-monthly/">《你有几张「云」账单？》</a>，感觉挺有意思，所以自己也来总结一下。</p>

<h2 id="httpwwwaliyuncom"><a href="http://www.aliyun.com/">阿里云</a></h2>

<p>目前 <a href="http://www.getyii.com/">GetYii</a> 是放在阿里云上的，<a href="http://www.forecho.com/">我的首页</a> 也放在上面，买的是深圳最便宜的套餐，每个月<strong>62块钱</strong>，基本上够用。
速度还上比较稳定的，访问国内的还是比那些国外的 VPS 要快的多，唯一麻烦的是，国内域名必须备案。</p>

<h2 id="section">搬瓦工</h2>

<p>VPN 应该是每个程序员必备的工具了，无论是使用 Google，还是看 YouTube 视频教程，都的翻墙。以前有试过各种免费版的 VPN 但是都不稳定，后来有买过红杏，
想着10快钱一个月也不贵，但是刚买一个月还没用到就挂了，有点坑啊。</p>

<p>再后来经同事介绍买了 bandwagonhost （也就是我说的搬瓦工）VPS 自建 Shadowsocks，差不多是一键安装的，买的是最低套餐，差不多每个月<strong>18块钱</strong>。
本来有更低套餐的，但是我买的有点晚了，被抢完了。至于稳定性，还算可以，在家偶尔看一下 YouTube 缓冲720P 的速度还能接受，主要是便宜，也懒得折腾了。</p>

<p>Shadowsocks 配上一个智能路由器可以实现自动翻墙功能，配置之后只要你连上我家 Wi-Fi 就能自动实现翻墙，平常在家刷个 Twitter 还是非常方便的。</p>

<!--more-->

<h2 id="apple-music">Apple Music</h2>

<p>这货刚推出来的时候手贱点了试用，可以免费试用3个月，然后你不手动取消的话，会自动扣钱。就在抢几天的时候，某天早上莫名的收到信用卡扣费的消息，
之后查询邮箱才发现原来我用 Apple Music 已经三个月了啊，基本上都没怎么打开过。</p>

<p>最近我最爱的乐队 Coldplay 出新专辑了，但是虾米一直听不了，就连网易云音乐也是收费才能听到，要8块钱，后来想想算了，还是用 Apple Music，至少有
<strong>15块钱</strong>家庭套餐版，但是用了一阵子 Apple Music 之后我来说说感受吧：</p>

<p>－ 打开Apple Music 跟打开 App Store 一样经常抽风，打开比较慢，不稳定。
－ 我不知道 Mac 上面怎么用 Apple Music，在 iPhone 上听歌比较方便，但是有时候用 Mac 工作的时候也下想听一下歌，总不能还得用手机听歌吧，还有整理歌单的时候手机还是没用电脑效率高。</p>

<p>综上所述，我还得考虑下是否值得买 Apple Music。</p>

<h2 id="section-1">手机套餐</h2>

<p>手机话费，由于我说外省的号，来来深圳也懒得换号了，因为换号意味着要换各种银行卡的账号，麻烦。虽然是 3G 手机不支持 4G，但是我还是用的 4G 自由组合套餐，
平时电话打的少，就没用选通话时长套餐，直接选了一个 1G 流量套餐和6元的来电显示费用。1G 流量每月基本够用，一共<strong>54块钱</strong>每月。至于联通的话有些地方会没有信号，这点比较坑爹。</p>

<h2 id="section-2">宽带</h2>

<p>以前一直用长城宽带，特点是便宜，一个月只要60左右，看国内最近比较火的电视剧网速都比较快，按理说应该是一个比较可以的宽带，但是却不能满足
身为程序员的我们，因为有时候用长城宽带看 GitHub 都不稳定，而且买了VPN 有时候也不能连接，最后还是忍不了换了电信，价格是之前的2倍左右 － <strong>129块钱</strong>，但是速度很稳定。
10M，不像长城宽带宣传 20M 还不稳定。</p>

<h2 id="section-3">总结</h2>

<p>算了算大概每个月接近300元的开销。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年我读了哪些书？]]></title>
    <link href="http://blog.forecho.com/what-i-read-in-2015.html"/>
    <updated>2016-01-10T02:51:28+00:00</updated>
    <id>http://blog.forecho.com/what-i-read-in-2015</id>
    <content type="html"><![CDATA[<p>时间永远不会去等你，不管你愿不愿意，2016年还是来了。</p>

<p>说来惭愧，以前都是在上班的地铁上才有时间读书，但是2015年大多数情况是我上班的地铁上人非常多，挤的看书的空间都没了。
这种情况直到我11月换了一家上班有一小时弹性工作制的公司后才得以改善，以后再也不用赶着上班高峰期坐地铁了。</p>

<p>书虽然不多，但是还是要总结一下：</p>

<p><strong><a href="http://book.douban.com/subject/6709783/">《浪潮之巅》</a></strong></p>

<p>这本书讲的是 AT&amp;T 公司、IBM 公司、苹果公司、英特尔公司、微软公司、思科公司、雅虎公司和 Google 公司等一些公司的发展
历史，虽然每个公司讲得都不多，但是我觉得搞互联网的人都应该了解那段历史。至少了解什么是摩尔定律？什么是安迪 – 比尔定律？</p>

<p>这本书也是非常的厚，前前后后我大概看了好几个月。总的来说这本书给我的受益很多，我非常喜欢了这类讲公司历史的书。</p>

<!--more-->

<p><strong><a href="http://book.douban.com/subject/4163938/">《软件随想录》</a></strong></p>

<p>以前买了他的《黑客与画家》但是没看完就被二姐借去了，现在都没补完那本书…</p>

<p>之前就想看这本书，但是考虑到这本书是2009年出版的，担心内容是否有点过时，在网上也没找到好的电子版。
然后有一次去图书馆淘书的时候发现这本书了，果断借了回来，然后每天晚上看这本书，这本书算是我从图书馆借来唯一认真看完的书。
看完我还意犹未尽的感觉，书里面的内容在现在看来依然很有用，可惜现在作者 Joel 已经不在网络上写博客了。</p>

<p>然后我无意中发现这本书在2015年4月有再版，还分<a href="http://book.douban.com/subject/26366419/">卷1</a>和<a href="http://book.douban.com/subject/26366425/">卷二</a>果断买了下来，像这种书，看完以后过一段再去看一边你的体会可能就不一样了。</p>

<p>从此对作者路转粉。</p>

<p><strong><a href="http://book.douban.com/subject/25880845/">《程序员的修炼 - 从优秀到卓越》</a></strong></p>

<p>接着去年<a href="http://book.douban.com/subject/24868904/">《高效能程序员的修炼 - 软件开发远不止是写代码那样简单……》</a>，竟然发现有续本，第一本看完确实有意犹未尽的感觉，果断买了这本书。</p>

<p><strong><a href="http://book.douban.com/subject/25861795/">《重来2 － 更为简单高效的远程工作方式》</a></strong></p>

<p>《重来》前几年读过，然后就成为他们的忠实粉丝了，虽然现在已经忘记那本书具体讲什么了，但是记得当时对书有很大的认同感，有必要再读一次。上好上次在 Coding 上用码币兑换了纸质书。</p>

<p>后来无意中发现这本书，果断阅读，没看到小标题时，本以为会继续讲跟产品有关的内容，实际上《重来2》专注于讲远程工作的书，而这正是我想要的。去年就有了远程办公的想法，也一致在羡慕
在家办公的人，而这本书让我更清晰的认识到了远程办公，他们以自己的实践总结出来的经验分享给我们，真的很受益，也解除了我想远程办公的很多疑惑。</p>

<p>真的很感谢他们这本书，2016 年我的目标是迈出远程办公的脚步。</p>

<p><strong><a href="http://book.douban.com/subject/5362909/">只有偏执狂才能生存</a></strong></p>

<p>除了以上四本书，剩下的虽然每两个月去图书馆借一些书回来看，但是只是随便看看，都想不起来看了哪些书了😂。
总之2015年碎片阅读太多，看书太少，2016年要给自己制定一个计划，做到2个月至少一本书。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Kindle 阅读]]></title>
    <link href="http://blog.forecho.com/use-the-kindle-reading.html"/>
    <updated>2016-01-09T07:40:34+00:00</updated>
    <id>http://blog.forecho.com/use-the-kindle-reading</id>
    <content type="html"><![CDATA[<h2 id="section">与书结缘的时间线</h2>

<p>也许是小时候受四姨夫的印象，很喜欢看书。前几年回家过年看到他，发现你衣服里面还带着一本宋词鉴赏的书，没想到
他还在看这样的书。</p>

<p>初中那会儿出去跟家人出去逛街，看到书店都两眼放光不想走了。那个时候身上没多少钱，记得有一次和弟弟去逛
图书馆只买了三本书确花了50多块钱，我到现在还记得是哪三本书 - 一本是古希腊神话，另外一本是英语语法的书，最后一本书是英语短语的书。</p>

<p>后来在武汉的时候很喜欢下午5点多的时候去街上摆书的地摊上看看，5块钱就能买3本《格言》和《特别关注》等比较旧一点的杂志，但是我觉得非常值。</p>

<p>再后来高中的时候碰到一个好的语文老师，对于我们这种不太喜欢听语文课的人，她不反对我们上她的课看其他书，当然前提是看好书，她非常反对修仙类的网络小说，
当然包括当时非常火的《诛仙》、《盗墓笔记》等等都归类为不好的书。曾经当着我们的面把一个不听她话的同学的书给撕掉了。对于我这种看书比较慢的人，我当然不喜欢
看那些儿书了，那个时候我看的最多的有蔡智恒、沧月、蔡骏、韩寒的书了，当然我也不否认我看过几本郭敬明和饶雪漫的书，看书的品味都是受当时玩的很好的哥们影响的，非常感谢他们。</p>

<p>上大学之后我看书的时候倒是少了，其实当时报专业的时候我都不知道我们专业具体学什么的，只知道是计算机方面。后来证明我选择的正式我喜欢的，
专业课我基本上都会认证去学。学校有一个标志性建筑 - 图书馆，是我非常向往的地方。一楼和二楼是杂志区，算是比较新的，刚开始去的次数比较多，但是后来
自从有了电脑之后，在高中养成的爱好 - 动漫和电影，慢慢的被放大了，晚上经常在寝室看电影了。但是偶尔回去三楼借一下管理类的书，
每次放寒假都会去五楼接专业书带回家过年看，也会去看一下杂志。关于看书整个大学有几件事印象比较深的书：</p>

<ul>
  <li>在杂志看了一本互联网周刊的杂志，里面有介绍作为一个慢公司的豆瓣，觉得这个公司很有意思，给我留下较深过的印象。</li>
  <li>看了一本关于 Google 的书，好像叫《搜主义》，才开始了解 Google。</li>
  <li>看了一本分享全球企业家演讲文章的书，那个时候开始喜欢看一些管理类的书。</li>
  <li>第一年寒假的时候借了一本 C 语言的书，回去看，才真正知道 C 语言是怎么回事。之前上课课程安排的都不好，老师在上面讲的很投入，但是我在下面打瞌睡。</li>
</ul>

<!--more-->

<h2 id="kindle">Kindle</h2>

<p>上班半年多之后，知道有 Kindle 这个东西，但是对这个东西还没什么概念，因为高中有买 MP4 然后拿数据线去网吧下载 TXT 的经历。
直到有一次参加一个武汉知乎聚会，发现一个同学带了一个电纸书，但是不是 Kindle 是 Nook，体验了一番瞬间被那个水墨屏给震撼到了。
回来之后立马搜索了一下，决定买一个 Kindle，但是那个时候 Kindle 还没有国产的，去淘宝搜索一个，最新版是 Kindle5，价格600，没犹豫立马就买了。</p>

<p>自从那之后 Kindle 上下班一直陪伴着我，用 Kindle 看的书虽然不是非常多，但是我仍然认为 Kindle 是我买的最
值得的一个电子设备，而且还不伤眼睛。现在的我们很少会有耐心在电脑上看完一篇比较长的文章，但是我可以配合 <a href="https://www.readability.com">readability</a> 的 Send to Kindle 真是利器，
让我阅读了很多长篇文章，受益良多。</p>

<p>有很多人不太理解为什么有了 iPhone 和 iPad 之后为什么还需要 Kindle？我认为有两点：</p>

<ul>
  <li>Kindle 不伤眼镜，因为是水墨屏。</li>
  <li>Kindle 更专一，专注于阅读。有时候我们用手机去阅读，不到2分钟就想去刷微信刷微博，或者来一个推送消息，对阅读的干扰非常大。这就是为什么我都大半年不看微信订阅号了，阅读体验非常差。</li>
</ul>

<h2 id="kindle5-vs-kindle-paperwhite-3">Kindle5 VS Kindle Paperwhite 3</h2>

<p>前几天看到京东国际上有做活动，只要666就能把 Kindle Paperwhite 3 带回家，但是是海外版，不能退不保修，考虑一下，最后还是心动了。
下面放两张对比图片：</p>

<p>左边是 KPW3，右边是 Kindle5：</p>

<p><img src="http://i4.tietuku.com/9eedcc5d900678dd.png" alt="" /></p>

<p>KPW3 后背 LOGO 变成 amazon 了：</p>

<p><img src="http://i4.tietuku.com/c1f9765d63abda74.png" alt="" /></p>

<p>海淘最痛苦的是，买了东西要经过漫长的等待！我差不多等了20天，算是一种折磨。用了一段 KPW3 之后我来谈谈两个的区别：</p>

<ul>
  <li>受到摩尔定律之福，想不到2015年年底我买 KPW3 比我在2012年年底买的 Kindle5 只贵了一点点。</li>
  <li>Kindle5 没触屏，全是实体按键，两侧边翻页体验非常好，但是打字的体验非常差，还好我只有在输入 WIFI 密码的时候需要打字。KPW3 触屏，只有一个开机键实体按键，触屏翻页的时候偶尔会有误操作。但是因此 KPW3 重量也增加了。</li>
  <li>明显 KPW3 硬件更强大了，操作的时候反应速度也快了点。容量也变成 4G，Kindle5 是 1G。</li>
  <li>KPW3 有屏幕背光，Kindle5 没有，灯光暗的时候需要借助外界灯光才能阅读。</li>
</ul>

<p>大概就是以上吧，Kindle5 唯一不能然我割舍的是两侧边翻页按键和轻薄。Kindle Voyage 好像解决了我的第一个问题，我有体验过，但是重量没对比过。</p>

<h2 id="section-1">小插曲</h2>

<p>国际亚马逊账号和国内亚马逊账号是各自独立的，使用 KPW3 登录账号的时候，一直登录是美国账号，但是系统明明是中文的，后来我才发现，我两个账号账号密码设置成一样的了。解决办法就是修改其中一个账号密码。</p>

<h2 id="section-2">总结</h2>

<p>总结以上就是，如果你是一个喜欢阅读的人，非常推荐你入手一款 Kindle，他讲带给你的受益远远超过它的价格，不用犹豫了。
至于是否考虑其他电纸书？我的回答是：不要考虑，直接买 Kindle，因为只有它成功的解决了电子阅读需求。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[塑造成功框架的哲学]]></title>
    <link href="http://blog.forecho.com/successful-framework-philosophies.html"/>
    <updated>2015-12-27T14:37:01+00:00</updated>
    <id>http://blog.forecho.com/successful-framework-philosophies</id>
    <content type="html"><![CDATA[<blockquote>
  <p>来源：<a href="http://www.capitalone.io/blog/successful-framework-philosophies/">Philosophies that Shaped Successful Frameworks</a></p>
</blockquote>

<p>在过去的十年里我们看到了许多软件框架的出现，像 <a href="http://spring.io/">Spring</a> 和 <a href="http://rubyonrails.org/">Ruby on Rails</a> 已经是非常成功的框架了，掌握它们就意味着打开多扇就业机会的大门了。然而，对于每一个框架的成功，背后的大多数开发人员都不被人关注。2008年1月1日<a href="https://en.wikipedia.org/wiki/Software_framework">维基百科</a> 列出了67个 Web 框架。然而今天，超过三分之二的消失在列表中或在三年内没有更新。作为 Yii 框架的创造者，我花了很多时间调查各种框架和理解为什么有些成功，有些失败了。我将描述我发现塑造成功框架的一些哲学。</p>

<h2 id="section">为什么框架?</h2>

<p>建立一个成功的框架，重要的是要了解什么是框架，开发人员为什么需要它们。</p>

<p><a href="https://queue.acm.org/detail.cfm?id=1017005">Douglas C. Schmidt 等人</a> 认为框架作为一个集成的软件构件(如类、对象和组件)集合，为相关应用程序提供一个可重用的体系结构。根据这一定义，
框架应该是一个已完工的应用骨架组成可重用和可定制的组件。开发人员将扩展并定制一个框架通过提供他们的应用程序和领域特定逻辑来形成一个完整的应用程序。</p>

<p>一个框架典型的特征就是所谓的控制反转（<a href="http://martinfowler.com/bliki/InversionOfControl.html">inversion of control</a>）。框架通常扮演着组织主程序的角色和调用应用程序代码。这里是反过来的控制流——它调用我而不是我调用框架。下图说明了框架之间的关系，函数库，和应用程序。注意框架通常提供现成的功能的库，以帮助开发人员构建应用程序更快。</p>

<p><img src="https://segmentfault.com/img/bVtewA" alt="" /></p>

<p>开发人员使用框架最重要的原因是框架如何提高生产力和帮助提高代码质量。例如，现代的框架(例如，django)，经常提供代码生成工具或样板帮助立即启动新项目。此外，精心设计的框架内嵌安全保护措施，帮助预防开发人员犯典型的安全漏洞。</p>

<p>企业使用框架，还有一个额外的好处是，它可以应用在整个企业，帮助执行标准。框架提供了记录模式，详细的设计和实现的工具用于在所有应用程序之间提供一个一致的结构。例如，在 Capital One (译者注：薛强所在的公司) 我们开发一个 「Chassis」的框架作为一个集成的基础，统一了许多厂商和顾客公司内部开发应用程序的 API。</p>

<p>当然，并不是所有的开发人员喜欢使用框架。一些一致的抱怨包括陡峭的学习曲线，框架耦合性比较高，性能较低，等等。今天，在这篇文章中我将为你解释现代框架如何的解决这些问题，让大多数的这些抱怨不再适用。</p>

<!--more-->

<h2 id="section-1">哲学</h2>

<p>像任何一个产品一样，一个框架的成功取决于许多因素，包括其背后的思想，代码质量、文档，周围社区，营销，支持，等等。在我看来，特别重要的一项是考虑当一个框架被设计和开发的哲学。</p>

<p>好久以前 Python 开发者 Tim Peters 开发 Python 时发表了被称为 <a href="https://www.python.org/dev/peps/pep-0020/">Python 之禅</a> 的二十格言设计原则。『优美胜于丑陋，明了胜于晦涩，简洁胜于复杂……』他们鼓舞了许多<a href="https://redd.it/15itwl">类似的编程语言之禅（similar programming language zens）</a>，我发现这些格言是适用于框架设计的。根据我的框架开发经验，我特此冷凝和总结我认为任何成功的框架最重要的哲学。</p>

<ul>
  <li>越简单越好</li>
  <li>整体设计是最糟糕的</li>
  <li>一致性</li>
  <li>明了胜于晦涩</li>
  <li>约定大于配置</li>
</ul>

<h2 id="section-2">越简单越好</h2>

<p>让开发人员转换一个新的框架从来都不是一件容易的事。然而，当开发人员选用框架，会作为重点依靠它来投资当前和未来的项目。此外，不想使用类库 - 开发人员可以学习一个 API 实现它 - 学习框架要求开发人员在投入实际使用之前要充分理解框架规则。因此，重要的是要确保简单的设计一个框架，使它更容易、有趣，而且容易去学习，接受和利用。</p>

<p>为了实现简单，一个框架应该强制执行一定数量的限制规则；同时，这些规则应以统一的方式设计和有良好的文档记录。框架执行更多的规则，陡峭的学习曲线，让开发人员很难接受。当规则是一致的，开发人员可以更快学习它们。没有文档，一个框架是无用的。因为没有人会花时间反向工程其规则。</p>

<p><a href="http://alirizhi.com/">Express.js framework</a> 框架路由语法规则的设计是一个很好的例子，一个非常受欢迎的 web 应用服务器框架。而路由在 web 应用程序中是一个重要的概念，是确定应用程序如何响应客户端请求一个特定的端点（一个HTTP方法和一个URI）。Express.js 介绍一个简单的规则来定义一个路线，<code>app.METHOD(PATH, HANDLER)</code>，<code>METHOD</code> 是一个 HTTP 请求方法(例如 GET、POST)，<code>PATH</code> 是服务器上的一个 URI 路径，<code>HANDLER</code> 是回调函数路线相匹配时要执行的。下面的代码片段显示了 Express.js 路由代码的样子。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="javascript"><span class="line"><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span><span class="line"><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class="line">
</span><span class="line"><span class="c1">// accept homepage request </span>
</span><span class="line"><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Hello World!&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="c1">// accept POST request at /user </span>
</span><span class="line"><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/user&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Got a PUT request at /user&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="c1">// accept DELETE request at /user </span>
</span><span class="line"><span class="nx">app</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="s1">&#39;/user&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;Got a DELETE request at /user&#39;</span><span class="p">);</span>
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>上面的代码是不言自明的，因为它像是如何去看一个 HTTP 请求。因此,开发人员只需要很少的努力去学习就记住这个路由语法并且把它的实用性应用到自己的项目中。</p>

<h2 id="section-3">整体设计是最糟糕的</h2>

<p>这里的术语「整体」指的是以一个以紧密耦合的代码库为基础构建的框架。web 框架刚开始流行时，他们往往是一个整体，因为他们的主要目标是提供全方位的快速的 web 应用程序开发。渐渐地，人们意识到整体框架有很多问题。例如，
即使改变是框架完全无关的一小部分需要重新测试和释放整个，从而导致应用程序的框架要重建。实际上，整体框架的中代码耦合使得它非常难以保持不同版本的向后兼容性。比如专业缓存、日志、数据库，人们变得不那么愿意被绑定到一个单一的整体框架。</p>

<p>现代框架往往是松散耦合的体系结构。全栈框架（例如 Spring ）已经演变成由松散耦合的组件可以单独使用或与第三方交换的框架。专门的框架是有明确的契约，以支持更好的互操作性，这使得应用程序不依赖于特定的框架。例如，一个非常受欢迎的 web 路由框架的特点是所谓『Sinatra-type 框架』，如 <a href="http://www.sinatrarb.com/">Sinatra</a>，<a href="http://expressjs.com/">Express.js</a> 和 <a href="http://martini.codegangsta.io/">Martini</a>。这些框架使用以下中间件管道架构支持请求路由和处理web应用程序。框架本身是非常小的,但开放式体系结构允许他们无限丰富的各种中间件组件。</p>

<p><img src="https://segmentfault.com/img/bVtewC" alt="" /></p>

<h2 id="section-4">一致性</h2>

<p>一致性意味着一个框架，坚持使用统一的设计，命名约定，代码风格，代码组织等等。一个一致性的框架将降低门槛，因为用户可以学习框架一个方面，并且应用相同的模式，去快速学习其他的结构。一致还可以帮助用户减少框架特征错别字或误用的可能性。</p>

<p>例如，当设计 Yii 框架的 query builder ，我们把一致性作为一个指导标准。查询构建器（query builder）允许您以编程方式创建一个数据库无关的 SQL 语句，避免 SQL 注入攻击。为了帮助用户更容易地记住它的 API ,我们介绍了链式接口和命名后相应的 SQL 关键字的方法。下面的代码片段显示了如何使用 SQL 语句查询构建器设计。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="php"><span class="line"><span class="p">(</span><span class="k">new</span> <span class="nx">Query</span><span class="p">())</span>
</span><span class="line">    <span class="o">-&gt;</span><span class="na">select</span><span class="p">(</span><span class="s1">&#39;id, email&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="o">-&gt;</span><span class="na">from</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="o">-&gt;</span><span class="na">orderBy</span><span class="p">(</span><span class="s1">&#39;last_name, first_name&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="o">-&gt;</span><span class="na">limit</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class="line">    <span class="o">-&gt;</span><span class="na">all</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>上面的代码将生成和执行 MySQL 声明如下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">SELECT</span> <span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">email</span><span class="o">`</span><span class="k">FROM</span> <span class="o">`</span><span class="k">user</span><span class="o">`</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="o">`</span><span class="n">last_name</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">first_name</span><span class="o">`</span><span class="k">LIMIT</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>正如您可以看到的，代码读取非常类似于你编写 SQL 语句。查询构建器之间的一致性和 SQL 语法很容易学习查询生成器。</p>

<h2 id="section-5">显示大于隐式</h2>

<p>关于编写自己的代码显式大于隐式，避免过多的使用 “自动魔法”，有两个原因坚持这种哲学。首先，显示的代码更容易理解和维护。由于代码是自解释的，维护人员可能不是代码的原作者，不需要来回跳转找到实际上执行的代码。其次，显示的代码不容易出错。虽然显示的可能需要编写更多的代码行，它减少了看似简单含蓄确笼罩着重要的代码的情况。</p>

<p>看看下面的两个 ORM (对象关系映射) 在 PHP 的代码。他们都希望实现『订单』数据库记录和『客户』DB 记录之间建立外键引用约束的相同的目标。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="err">$</span><span class="k">order</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">(</span><span class="s1">&#39;customer&#39;</span><span class="p">,</span> <span class="err">$</span><span class="n">customer</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>与</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="err">$</span><span class="k">order</span><span class="o">-&gt;</span><span class="n">customer</span> <span class="o">=</span> <span class="err">$</span><span class="n">customer</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>第一个版本是正常的方法调用。第二个版本看起来更酷，因为复杂的数据库连接操作可以通过一个看似简单的任务来完成。然而，这是一种错觉，第二个版本的简单性是由其他地方的的复杂性隐藏掩盖。例如，用户不得不通过某种形式的文档来学习这种特殊的赋值语法，以便在实践中使用它。因为链接操作看起来像一个正常分配时，用户可能会忘记处理由它引起的潜在的异常，从而导致整个程序发生故障。</p>

<p>事实上，Yii 的发展过程中，关于两个版本我们讨论了很多，并最终选定了第一个版本，它已收到投诉很少。</p>

<h2 id="section-6">约定大于配置</h2>

<p>约定大于配置的概念已经存在好多年了。这个想法是一个框架应该采取坚持的公约，遵守约定同时仍然允许通过配置提高扩展性。决策的目标是减少开发人员需要做的数目，从而实现哲学# 1——简单性。</p>

<p>约定大于配置最早在 Ruby on Rails 框架中开始流行。Rails 提供一个 ActiveRecord 库，用类和数据库中的表之间的映射处理。按照惯例，表名是类名的多元化形式。因此，该类账户将有一个表称为帐户。如果该表不命名这种方式，用户将必须显式配置类名和表名称之间的映射关系。</p>

<p>许多 MVC 框架使用约定大于配置请求路由到特定的代码片断。如下图所示,<a href="http://sailsjs.org/">Sails.js framework</a> 框架使用的约定，其中的 <code>/we/say/hi</code> URL请求将被路由到<code>controllers/we</code>目录下 SayController 控制器类的<code>hi</code> 动作。按照本约定，开发人员不再需要对控制器的行为定义路由规则。但是，如果开发人员想要使用一个不同的路由规则，他们仍然可以通过显式绑定一个路由到一个控制器动作。</p>

<p><img src="https://segmentfault.com/img/bVtewD" alt="" /></p>

<p>约定优于配置有助于减少需要编写的代码量。然而，它会给开发人员需要遵守规则引入了额外的成本。同时，也往往与前面讨论的『显示大于隐式』的哲学相冲突。事实上，虽然早期版本的 Spring 框架使用了似的 Sails.js 路由约定，Spring 现在要求开发者通过注释明确指定映射。因此，当决定是否引入新的规则以支持约定大于配置，应采取明智的判断。</p>

<h2 id="section-7">总结</h2>

<p>建设一个成功的框架是所有关于功能和简洁性之间的平衡。整个构建框架的过程中，取舍经常需要以坚守，并举例说明，上述哲学加以考虑。</p>

<p>有时候，你可能会遇到其中一个理念是与另一个直接冲突的情况。一致性是比简单更重要？在约定比显性更重要？在这种情况下，<strong>请记住，一个框架的最终目标是简化开发人员的工作，并简化代码的编写进程。因此，保持它的简单和直接。</strong>如果他们有明确性冲突，因为前者会带来隐藏的复杂性可以牺牲约定。同样，如果坚持一致性可以稍微违反严格会造成额外的并发症。</p>

<p>Posted Dec 15, 2015 by…</p>

<p><img src="https://segmentfault.com/img/bVtewE" alt="" />
<strong>Qiang Xue</strong></p>

<p>软件工程师LEAD、技术人员</p>

]]></content>
  </entry>
  
</feed>
